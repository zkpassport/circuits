use crate::constants::{
    APP_ID_MAX_LEN, CREDENTIAL_TBS_MAX_LEN, FACEMATCH_MODE_REGULAR, MAX_FIELD_BYTES,
};
use crate::{
    get_dg2_hash_from_client_data, get_facematch_mode_from_client_data, get_tbs_not_before_date,
    verify_dg2_hash_in_client_data,
};
use super::constants::AAGUID_DEVELOPMENT;
use super::{get_nonce_from_credential_tbs, unsafe_calculate_auth_data_length};
use utils::{
    get_array_slice, pack_le_bytes_into_fields, poseidon2_hash_packed,
    unsafe_get_asn1_element_length,
};

#[test]
fn test_calculate_auth_data_length() {
    let auth_data: [u8; 180] = [
        0x88, 0xa4, 0xf2, 0x4d, 0x24, 0x0d, 0xa6, 0x75, 0x3f, 0x7c, 0x61, 0xf0, 0xb3, 0xa1, 0x45,
        0xa0, 0xc3, 0xc3, 0xac, 0x06, 0xb2, 0x9a, 0x23, 0x5f, 0xe4, 0xa7, 0xb0, 0xee, 0x0d, 0x25,
        0x31, 0x87, 0x40, 0x00, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74, 0x65, 0x73,
        0x74, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x00, 0x20, 0x85, 0x9a, 0x9a, 0xe5, 0x66,
        0x3b, 0xda, 0xdd, 0xbc, 0x2e, 0x26, 0xa6, 0xdb, 0x93, 0x40, 0x39, 0xf3, 0x7f, 0x8a, 0xff,
        0xbe, 0xf8, 0x81, 0x5f, 0xaf, 0x42, 0xb6, 0xc7, 0x3f, 0x28, 0xb8, 0xc0, 0xa5, 0x01, 0x02,
        0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66,
        0x36, 0xf2, 0xe1, 0x0d, 0xe8, 0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20,
        0x7d, 0x89, 0xbb, 0x73, 0xed, 0xe0, 0x50, 0x14, 0x59, 0x22, 0x58, 0x20, 0x47, 0xcf, 0xb6,
        0xbc, 0x5a, 0x95, 0x61, 0x5b, 0xe6, 0xa3, 0x41, 0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5,
        0xbb, 0x14, 0x07, 0x10, 0x4b, 0xe1, 0x9a, 0xab, 0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    // Safety: This is safe because it only calculates the length of the authData to use for hashing
    // The constrained code then verifies this hash is the one bound to the signed data
    let length = unsafe { unsafe_calculate_auth_data_length(auth_data) };
    assert(length == 164, "CBOR length mismatch");
}

#[test]
fn test_verify_auth_data_aaguid() {
    let auth_data: [u8; 180] = [
        0x88, 0xa4, 0xf2, 0x4d, 0x24, 0x0d, 0xa6, 0x75, 0x3f, 0x7c, 0x61, 0xf0, 0xb3, 0xa1, 0x45,
        0xa0, 0xc3, 0xc3, 0xac, 0x06, 0xb2, 0x9a, 0x23, 0x5f, 0xe4, 0xa7, 0xb0, 0xee, 0x0d, 0x25,
        0x31, 0x87, 0x40, 0x00, 0x00, 0x00, 0x00, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74, 0x65, 0x73,
        0x74, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x00, 0x20, 0x85, 0x9a, 0x9a, 0xe5, 0x66,
        0x3b, 0xda, 0xdd, 0xbc, 0x2e, 0x26, 0xa6, 0xdb, 0x93, 0x40, 0x39, 0xf3, 0x7f, 0x8a, 0xff,
        0xbe, 0xf8, 0x81, 0x5f, 0xaf, 0x42, 0xb6, 0xc7, 0x3f, 0x28, 0xb8, 0xc0, 0xa5, 0x01, 0x02,
        0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66,
        0x36, 0xf2, 0xe1, 0x0d, 0xe8, 0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20,
        0x7d, 0x89, 0xbb, 0x73, 0xed, 0xe0, 0x50, 0x14, 0x59, 0x22, 0x58, 0x20, 0x47, 0xcf, 0xb6,
        0xbc, 0x5a, 0x95, 0x61, 0x5b, 0xe6, 0xa3, 0x41, 0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5,
        0xbb, 0x14, 0x07, 0x10, 0x4b, 0xe1, 0x9a, 0xab, 0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    // AAGUID (16): 617070617474657374646576656c6f70 -> ASCII appattestdevelop (development environment)
    let aaguid: [u8; 16] = get_array_slice::<_, 16>(auth_data, 37);
    assert(aaguid == AAGUID_DEVELOPMENT);
}

#[test]
fn test_get_not_before_date() {
    let credential_tbs: [u8; CREDENTIAL_TBS_MAX_LEN] = [
        0x30, 0x82, 0x03, 0x4c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x98, 0xc0, 0x5b,
        0xa0, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x4f, 0x31, 0x23, 0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x41, 0x70, 0x70,
        0x6c, 0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x31, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x31, 0x38,
        0x30, 0x33, 0x32, 0x34, 0x34, 0x37, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30, 0x36, 0x30, 0x36,
        0x30, 0x35, 0x31, 0x35, 0x34, 0x37, 0x5a, 0x30, 0x81, 0x91, 0x31, 0x49, 0x30, 0x47, 0x06,
        0x03, 0x55, 0x04, 0x03, 0x0c, 0x40, 0x38, 0x35, 0x39, 0x61, 0x39, 0x61, 0x65, 0x35, 0x36,
        0x36, 0x33, 0x62, 0x64, 0x61, 0x64, 0x64, 0x62, 0x63, 0x32, 0x65, 0x32, 0x36, 0x61, 0x36,
        0x64, 0x62, 0x39, 0x33, 0x34, 0x30, 0x33, 0x39, 0x66, 0x33, 0x37, 0x66, 0x38, 0x61, 0x66,
        0x66, 0x62, 0x65, 0x66, 0x38, 0x38, 0x31, 0x35, 0x66, 0x61, 0x66, 0x34, 0x32, 0x62, 0x36,
        0x63, 0x37, 0x33, 0x66, 0x32, 0x38, 0x62, 0x38, 0x63, 0x30, 0x31, 0x1a, 0x30, 0x18, 0x06,
        0x03, 0x55, 0x04, 0x0b, 0x0c, 0x11, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
        0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,
        0x00, 0x04, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66, 0x36, 0xf2, 0xe1, 0x0d, 0xe8,
        0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20, 0x7d, 0x89, 0xbb, 0x73, 0xed,
        0xe0, 0x50, 0x14, 0x59, 0x47, 0xcf, 0xb6, 0xbc, 0x5a, 0x95, 0x61, 0x5b, 0xe6, 0xa3, 0x41,
        0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5, 0xbb, 0x14, 0x07, 0x10, 0x4b, 0xe1, 0x9a, 0xab,
        0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0xa3, 0x82, 0x01, 0xcf, 0x30, 0x82, 0x01, 0xcb, 0x30,
        0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e,
        0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x04, 0xf0, 0x30,
        0x81, 0x9f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x05, 0x04, 0x81,
        0x91, 0x30, 0x81, 0x8e, 0xa4, 0x03, 0x02, 0x01, 0x0a, 0xbf, 0x89, 0x30, 0x03, 0x02, 0x01,
        0x01, 0xbf, 0x89, 0x31, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x32, 0x03, 0x02, 0x01, 0x01,
        0xbf, 0x89, 0x33, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x34, 0x2f, 0x04, 0x2d, 0x59, 0x4c,
        0x35, 0x4d, 0x53, 0x33, 0x5a, 0x36, 0x33, 0x39, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x7a, 0x6b,
        0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74,
        0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x06,
        0x04, 0x04, 0x73, 0x6b, 0x73, 0x20, 0xbf, 0x89, 0x36, 0x03, 0x02, 0x01, 0x05, 0xbf, 0x89,
        0x37, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x39, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3a,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3b, 0x03, 0x02, 0x01, 0x00, 0xaa, 0x03, 0x02, 0x01,
        0x00, 0xbf, 0x89, 0x3c, 0x06, 0x02, 0x04, 0x73, 0x6b, 0x73, 0x20, 0x30, 0x81, 0xd3, 0x06,
        0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x07, 0x04, 0x81, 0xc5, 0x30, 0x81,
        0xc2, 0xbf, 0x8a, 0x78, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x88,
        0x50, 0x03, 0x02, 0x01, 0x02, 0xbf, 0x8a, 0x79, 0x09, 0x04, 0x07, 0x31, 0x2e, 0x30, 0x2e,
        0x31, 0x39, 0x38, 0xbf, 0x8a, 0x7b, 0x07, 0x04, 0x05, 0x32, 0x32, 0x47, 0x39, 0x30, 0xbf,
        0x8a, 0x7c, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7d, 0x08,
        0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7e, 0x03, 0x02, 0x01, 0x00,
        0xbf, 0x8a, 0x7f, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x00, 0x03, 0x02, 0x01, 0x00, 0xbf,
        0x8b, 0x01, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x02, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b,
        0x03, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x04, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x8b, 0x05,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x0a, 0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e,
        0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0b, 0x0f, 0x04, 0x0d, 0x32,
        0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0c,
        0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c,
        0x30, 0xbf, 0x88, 0x02, 0x0a, 0x04, 0x08, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6f, 0x73,
        0x30, 0x33, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x02, 0x04, 0x26,
        0x30, 0x24, 0xa1, 0x22, 0x04, 0x20, 0x04, 0x2e, 0x77, 0x46, 0x8c, 0xb5, 0x99, 0xb8, 0x31,
        0x05, 0x8f, 0x83, 0x69, 0xca, 0x10, 0x80, 0x97, 0xfa, 0x34, 0x1e, 0x75, 0xa4, 0x4d, 0x38,
        0xb5, 0x1b, 0x74, 0xa1, 0x5f, 0xea, 0xa1, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let credential_tbs_generalised_time: [u8; 854] = [
        0x30, 0x82, 0x03, 0x4c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x98, 0xc0, 0x5b,
        0xa0, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x4f, 0x31, 0x23, 0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x41, 0x70, 0x70,
        0x6c, 0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x31, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x22, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x35, 0x30, 0x38,
        0x31, 0x38, 0x30, 0x33, 0x32, 0x34, 0x34, 0x37, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x36,
        0x30, 0x36, 0x30, 0x36, 0x30, 0x35, 0x31, 0x35, 0x34, 0x37, 0x5a, 0x30, 0x81, 0x91, 0x31,
        0x49, 0x30, 0x47, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x40, 0x38, 0x35, 0x39, 0x61, 0x39,
        0x61, 0x65, 0x35, 0x36, 0x36, 0x33, 0x62, 0x64, 0x61, 0x64, 0x64, 0x62, 0x63, 0x32, 0x65,
        0x32, 0x36, 0x61, 0x36, 0x64, 0x62, 0x39, 0x33, 0x34, 0x30, 0x33, 0x39, 0x66, 0x33, 0x37,
        0x66, 0x38, 0x61, 0x66, 0x66, 0x62, 0x65, 0x66, 0x38, 0x38, 0x31, 0x35, 0x66, 0x61, 0x66,
        0x34, 0x32, 0x62, 0x36, 0x63, 0x37, 0x33, 0x66, 0x32, 0x38, 0x62, 0x38, 0x63, 0x30, 0x31,
        0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x11, 0x41, 0x41, 0x41, 0x20, 0x43,
        0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x13, 0x30,
        0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49,
        0x6e, 0x63, 0x2e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43,
        0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07,
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,
        0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66, 0x36,
        0xf2, 0xe1, 0x0d, 0xe8, 0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20, 0x7d,
        0x89, 0xbb, 0x73, 0xed, 0xe0, 0x50, 0x14, 0x59, 0x47, 0xcf, 0xb6, 0xbc, 0x5a, 0x95, 0x61,
        0x5b, 0xe6, 0xa3, 0x41, 0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5, 0xbb, 0x14, 0x07, 0x10,
        0x4b, 0xe1, 0x9a, 0xab, 0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0xa3, 0x82, 0x01, 0xcf, 0x30,
        0x82, 0x01, 0xcb, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02,
        0x30, 0x00, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03,
        0x02, 0x04, 0xf0, 0x30, 0x81, 0x9f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64,
        0x08, 0x05, 0x04, 0x81, 0x91, 0x30, 0x81, 0x8e, 0xa4, 0x03, 0x02, 0x01, 0x0a, 0xbf, 0x89,
        0x30, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x31, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x32,
        0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x33, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x34, 0x2f,
        0x04, 0x2d, 0x59, 0x4c, 0x35, 0x4d, 0x53, 0x33, 0x5a, 0x36, 0x33, 0x39, 0x2e, 0x61, 0x70,
        0x70, 0x2e, 0x7a, 0x6b, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x70,
        0x70, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
        0x70, 0x65, 0xa5, 0x06, 0x04, 0x04, 0x73, 0x6b, 0x73, 0x20, 0xbf, 0x89, 0x36, 0x03, 0x02,
        0x01, 0x05, 0xbf, 0x89, 0x37, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x39, 0x03, 0x02, 0x01,
        0x00, 0xbf, 0x89, 0x3a, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3b, 0x03, 0x02, 0x01, 0x00,
        0xaa, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3c, 0x06, 0x02, 0x04, 0x73, 0x6b, 0x73, 0x20,
        0x30, 0x81, 0xd3, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x07, 0x04,
        0x81, 0xc5, 0x30, 0x81, 0xc2, 0xbf, 0x8a, 0x78, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36,
        0x2e, 0x31, 0xbf, 0x88, 0x50, 0x03, 0x02, 0x01, 0x02, 0xbf, 0x8a, 0x79, 0x09, 0x04, 0x07,
        0x31, 0x2e, 0x30, 0x2e, 0x31, 0x39, 0x38, 0xbf, 0x8a, 0x7b, 0x07, 0x04, 0x05, 0x32, 0x32,
        0x47, 0x39, 0x30, 0xbf, 0x8a, 0x7c, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31,
        0xbf, 0x8a, 0x7d, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7e,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x8a, 0x7f, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x00, 0x03,
        0x02, 0x01, 0x00, 0xbf, 0x8b, 0x01, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x02, 0x03, 0x02,
        0x01, 0x00, 0xbf, 0x8b, 0x03, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x04, 0x03, 0x02, 0x01,
        0x01, 0xbf, 0x8b, 0x05, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x0a, 0x0f, 0x04, 0x0d, 0x32,
        0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0b,
        0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c,
        0x30, 0xbf, 0x8b, 0x0c, 0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e,
        0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x88, 0x02, 0x0a, 0x04, 0x08, 0x69, 0x70, 0x68, 0x6f,
        0x6e, 0x65, 0x6f, 0x73, 0x30, 0x33, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64,
        0x08, 0x02, 0x04, 0x26, 0x30, 0x24, 0xa1, 0x22, 0x04, 0x20, 0x04, 0x2e, 0x77, 0x46, 0x8c,
        0xb5, 0x99, 0xb8, 0x31, 0x05, 0x8f, 0x83, 0x69, 0xca, 0x10, 0x80, 0x97, 0xfa, 0x34, 0x1e,
        0x75, 0xa4, 0x4d, 0x38, 0xb5, 0x1b, 0x74, 0xa1, 0x5f, 0xea, 0xa1, 0xa7, 0x00, 0x00,
    ];

    // The expected notBefore date is "20250818032447" (YYYYMMDDhhmmss) which represents 2025-08-18T03:24:47.000Z
    let expected_not_before_date =
        [0x32, 0x30, 0x32, 0x35, 0x30, 0x38, 0x31, 0x38, 0x30, 0x33, 0x32, 0x34, 0x34, 0x37];

    // Extract the notBefore date (UTCTime) from the credential certificate TBS
    // The returned date is normalised from "250818032447" to "20250818032447"
    // UTCTime year 25 (00-49 range) gets converted to 2025 (20xx)
    let not_before_date = get_tbs_not_before_date(credential_tbs);
    // Verify the extracted notBefore date matches the expected value
    assert_eq(not_before_date, expected_not_before_date, "UTCTime notBefore date mismatch");

    // Extract the notBefore date (GeneralizedTime) from the credential certificate TBS
    let not_before_date_gtime = get_tbs_not_before_date(credential_tbs_generalised_time);
    // Verify the extracted notBefore date matches the expected value
    assert_eq(
        not_before_date_gtime,
        expected_not_before_date,
        "GeneralizedTime notBefore date mismatch",
    );
}
use super::get_app_id_from_credential_tbs;

#[test]
fn test_get_app_id_from_credential_tbs() {
    let credential_tbs: [u8; CREDENTIAL_TBS_MAX_LEN] = [
        0x30, 0x82, 0x03, 0x4c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x98, 0xc0, 0x5b,
        0xa0, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x4f, 0x31, 0x23, 0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x41, 0x70, 0x70,
        0x6c, 0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x31, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x31, 0x38,
        0x30, 0x33, 0x32, 0x34, 0x34, 0x37, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30, 0x36, 0x30, 0x36,
        0x30, 0x35, 0x31, 0x35, 0x34, 0x37, 0x5a, 0x30, 0x81, 0x91, 0x31, 0x49, 0x30, 0x47, 0x06,
        0x03, 0x55, 0x04, 0x03, 0x0c, 0x40, 0x38, 0x35, 0x39, 0x61, 0x39, 0x61, 0x65, 0x35, 0x36,
        0x36, 0x33, 0x62, 0x64, 0x61, 0x64, 0x64, 0x62, 0x63, 0x32, 0x65, 0x32, 0x36, 0x61, 0x36,
        0x64, 0x62, 0x39, 0x33, 0x34, 0x30, 0x33, 0x39, 0x66, 0x33, 0x37, 0x66, 0x38, 0x61, 0x66,
        0x66, 0x62, 0x65, 0x66, 0x38, 0x38, 0x31, 0x35, 0x66, 0x61, 0x66, 0x34, 0x32, 0x62, 0x36,
        0x63, 0x37, 0x33, 0x66, 0x32, 0x38, 0x62, 0x38, 0x63, 0x30, 0x31, 0x1a, 0x30, 0x18, 0x06,
        0x03, 0x55, 0x04, 0x0b, 0x0c, 0x11, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
        0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,
        0x00, 0x04, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66, 0x36, 0xf2, 0xe1, 0x0d, 0xe8,
        0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20, 0x7d, 0x89, 0xbb, 0x73, 0xed,
        0xe0, 0x50, 0x14, 0x59, 0x47, 0xcf, 0xb6, 0xbc, 0x5a, 0x95, 0x61, 0x5b, 0xe6, 0xa3, 0x41,
        0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5, 0xbb, 0x14, 0x07, 0x10, 0x4b, 0xe1, 0x9a, 0xab,
        0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0xa3, 0x82, 0x01, 0xcf, 0x30, 0x82, 0x01, 0xcb, 0x30,
        0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e,
        0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x04, 0xf0, 0x30,
        0x81, 0x9f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x05, 0x04, 0x81,
        0x91, 0x30, 0x81, 0x8e, 0xa4, 0x03, 0x02, 0x01, 0x0a, 0xbf, 0x89, 0x30, 0x03, 0x02, 0x01,
        0x01, 0xbf, 0x89, 0x31, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x32, 0x03, 0x02, 0x01, 0x01,
        0xbf, 0x89, 0x33, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x34, 0x2f, 0x04, 0x2d, 0x59, 0x4c,
        0x35, 0x4d, 0x53, 0x33, 0x5a, 0x36, 0x33, 0x39, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x7a, 0x6b,
        0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74,
        0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x06,
        0x04, 0x04, 0x73, 0x6b, 0x73, 0x20, 0xbf, 0x89, 0x36, 0x03, 0x02, 0x01, 0x05, 0xbf, 0x89,
        0x37, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x39, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3a,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3b, 0x03, 0x02, 0x01, 0x00, 0xaa, 0x03, 0x02, 0x01,
        0x00, 0xbf, 0x89, 0x3c, 0x06, 0x02, 0x04, 0x73, 0x6b, 0x73, 0x20, 0x30, 0x81, 0xd3, 0x06,
        0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x07, 0x04, 0x81, 0xc5, 0x30, 0x81,
        0xc2, 0xbf, 0x8a, 0x78, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x88,
        0x50, 0x03, 0x02, 0x01, 0x02, 0xbf, 0x8a, 0x79, 0x09, 0x04, 0x07, 0x31, 0x2e, 0x30, 0x2e,
        0x31, 0x39, 0x38, 0xbf, 0x8a, 0x7b, 0x07, 0x04, 0x05, 0x32, 0x32, 0x47, 0x39, 0x30, 0xbf,
        0x8a, 0x7c, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7d, 0x08,
        0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7e, 0x03, 0x02, 0x01, 0x00,
        0xbf, 0x8a, 0x7f, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x00, 0x03, 0x02, 0x01, 0x00, 0xbf,
        0x8b, 0x01, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x02, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b,
        0x03, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x04, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x8b, 0x05,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x0a, 0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e,
        0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0b, 0x0f, 0x04, 0x0d, 0x32,
        0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0c,
        0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c,
        0x30, 0xbf, 0x88, 0x02, 0x0a, 0x04, 0x08, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6f, 0x73,
        0x30, 0x33, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x02, 0x04, 0x26,
        0x30, 0x24, 0xa1, 0x22, 0x04, 0x20, 0x04, 0x2e, 0x77, 0x46, 0x8c, 0xb5, 0x99, 0xb8, 0x31,
        0x05, 0x8f, 0x83, 0x69, 0xca, 0x10, 0x80, 0x97, 0xfa, 0x34, 0x1e, 0x75, 0xa4, 0x4d, 0x38,
        0xb5, 0x1b, 0x74, 0xa1, 0x5f, 0xea, 0xa1, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    // Our Apple app ID: YL5MS3Z639.app.zkpassport.appattest-prototype (format is <team_id>.<bundle_id>)
    let our_apple_app_id: [u8; 45] = [
        0x59, 0x4C, 0x35, 0x4D, 0x53, 0x33, 0x5A, 0x36, 0x33, 0x39, 0x2E, 0x61, 0x70, 0x70, 0x2E,
        0x7A, 0x6B, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6F, 0x72, 0x74, 0x2E, 0x61, 0x70, 0x70, 0x61,
        0x74, 0x74, 0x65, 0x73, 0x74, 0x2D, 0x70, 0x72, 0x6F, 0x74, 0x6F, 0x74, 0x79, 0x70, 0x65,
    ];

    // Extract the app_id from the TBS
    let (app_id, app_id_len): ([u8; APP_ID_MAX_LEN], u32) =
        get_app_id_from_credential_tbs(credential_tbs);
    // The expected app_id (45 bytes followed by zeros padding to 100 bytes)
    let mut expected_app_id: [u8; APP_ID_MAX_LEN] = [0; APP_ID_MAX_LEN];
    // Copy the 45 app ID bytes into the expected array
    for i in 0..45 {
        expected_app_id[i] = our_apple_app_id[i];
    }

    // Verify the extracted app_id length is correct
    assert_eq(app_id_len, 45, "App ID length mismatch");
    // Verify the extracted app_id matches the expected value
    assert(app_id == expected_app_id, "App ID mismatch");
}

#[test]
fn test_unsafe_get_asn1_element_length() {
    let long_form_asn1_seq: [u8; _] = [
        0x30, 0x82, 0x01, 0xc8, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x09, 0xba, 0xc5, 0xe1,
        0xbc, 0x40, 0x1a, 0xd9, 0xd4, 0x53, 0x95, 0xbc, 0x38, 0x1a, 0x08, 0x54, 0x30, 0x0a, 0x06,
        0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x30, 0x52, 0x31, 0x26, 0x30, 0x24,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x41, 0x70,
        0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
        0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a,
        0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x13, 0x30,
        0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72,
        0x6e, 0x69, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x33, 0x31, 0x38, 0x31, 0x38,
        0x33, 0x39, 0x35, 0x35, 0x5a, 0x17, 0x0d, 0x33, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x4f, 0x31, 0x23, 0x30, 0x21, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x0c, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74,
        0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x31, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65,
        0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c,
        0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x76, 0x30, 0x10,
        0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00,
        0x22, 0x03, 0x62, 0x00, 0x04, 0xae, 0x5b, 0x37, 0xa0, 0x77, 0x4d, 0x79, 0xb2, 0x35, 0x8f,
        0x40, 0xe7, 0xd1, 0xf2, 0x26, 0x26, 0xf1, 0xc2, 0x5f, 0xef, 0x17, 0x80, 0x2d, 0xea, 0xb3,
        0x82, 0x6a, 0x59, 0x87, 0x4f, 0xf8, 0xd2, 0xad, 0x15, 0x25, 0x78, 0x9a, 0xa2, 0x66, 0x04,
        0x19, 0x12, 0x48, 0xb6, 0x3c, 0xb9, 0x67, 0x06, 0x9e, 0x98, 0xd3, 0x63, 0xbd, 0x5e, 0x37,
        0x0f, 0xbf, 0xa0, 0x8e, 0x32, 0x9e, 0x80, 0x73, 0xa9, 0x85, 0xe7, 0x74, 0x6e, 0xa3, 0x59,
        0xa2, 0xf6, 0x6f, 0x29, 0xdb, 0x32, 0xaf, 0x45, 0x5e, 0x21, 0x16, 0x58, 0xd5, 0x67, 0xaf,
        0x9e, 0x26, 0x7e, 0xb2, 0x61, 0x4d, 0xc2, 0x1a, 0x66, 0xce, 0x99, 0xa3, 0x66, 0x30, 0x64,
        0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01,
        0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
        0x16, 0x80, 0x14, 0xac, 0x91, 0x10, 0x53, 0x33, 0xbd, 0xbe, 0x68, 0x41, 0xff, 0xa7, 0x0c,
        0xa9, 0xe5, 0xfa, 0xea, 0xe5, 0xe5, 0x8a, 0xa1, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
        0x04, 0x16, 0x04, 0x14, 0x3e, 0xe3, 0x5d, 0x1c, 0x04, 0x19, 0xa9, 0xc9, 0xb4, 0x31, 0xf8,
        0x84, 0x74, 0xd6, 0xe1, 0xe1, 0x57, 0x72, 0xe3, 0x9b, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d,
        0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    // 0x30 0x03 = SEQUENCE with 3 bytes of content
    // Total length should be 5 (tag + length + content)
    let short_form_asn1_seq: [u8; 10] =
        [0x30, 0x03, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00];

    // Test with a long form example
    // Safety:
    let len = unsafe { unsafe_get_asn1_element_length(long_form_asn1_seq) };
    assert(len == 460);
    // Test with a short form example
    // Safety:
    let short_parsed_length = unsafe { unsafe_get_asn1_element_length(short_form_asn1_seq) };
    assert(short_parsed_length == 5);
}

#[test]
fn test_pack_le_bytes_into_fields() {
    let TEST_BYTES_1: [u8; _] = [
        0x11, 0x12, 0x13, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x21, 0x22, 0x23, 0x24, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let TEST_BYTES_2: [u8; _] = [
        0x11, 0x12, 0x13, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x21, 0x22, 0x23, 0x24, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
    ];
    let packed_1: [Field; _] = pack_le_bytes_into_fields::<MAX_FIELD_BYTES, _>(TEST_BYTES_1);
    let packed_2: [Field; _] = pack_le_bytes_into_fields::<MAX_FIELD_BYTES, _>(TEST_BYTES_2);
    let expected_1 =
        [0x11111111111111111111111111111111111111111111111111111111131211, 0x2524232221];
    let expected_2 =
        [0x11111111111111111111111111111111111111111111111111111111131211, 0x2524232221, 0x00];
    assert(packed_1 == expected_1);
    assert(packed_2 == expected_2);
    assert(packed_1.len() == 2);
    assert(packed_2.len() == 3);
}

#[test]
fn test_poseidon2_hash_packed() {
    let actual_len: u32 = 35;
    // Will pack into 2 fields
    let test_bytes_1: [u8; _] = [
        0x11, 0x12, 0x13, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x21, 0x22, 0x23, 0x24, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    // Will pack into 3 fields
    let test_bytes_2: [u8; _] = [
        0x11, 0x12, 0x13, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x21, 0x22, 0x23, 0x24, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let hash_1 = poseidon2_hash_packed(test_bytes_1, actual_len);
    let hash_2 = poseidon2_hash_packed(test_bytes_2, actual_len);

    assert(hash_1 == 0x27bb47500b200dcbdc1a275a1f87026a5fda0260eaef06c1890870cce33f42d7);
    assert(hash_2 == 0x27bb47500b200dcbdc1a275a1f87026a5fda0260eaef06c1890870cce33f42d7);
}

#[test]
fn test_get_dg2_hash_from_client_data() {
    let client_data: [u8; 169] = [
        0x30, 0x81, 0x97, 0x02, 0x01, 0x01, 0x0c, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x0a, 0x01,
        0x01, 0xa1, 0x81, 0x87, 0x30, 0x81, 0x84, 0x0a, 0x01, 0x01, 0x30, 0x2f, 0x30, 0x0b, 0x06,
        0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x04, 0x20, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x02,
        0x04, 0x05, 0x39, 0x7f, 0xb1, 0x02, 0x04, 0x04, 0x2c, 0x1d, 0x80, 0x04, 0x20, 0xe6, 0xdb,
        0x65, 0xc2, 0xa7, 0xc8, 0x2f, 0x2a, 0xe6, 0x2c, 0xd5, 0x5e, 0x36, 0xab, 0x78, 0x08, 0x9f,
        0xf9, 0x0b, 0x2f, 0x71, 0x85, 0xd5, 0x8d, 0x9e, 0x12, 0xe7, 0x5b, 0x74, 0x54, 0x3b, 0xe9,
        0x04, 0x20, 0x2a, 0x3c, 0x2e, 0x74, 0x6f, 0xeb, 0x93, 0x3a, 0x34, 0x6b, 0xc4, 0xee, 0x74,
        0x98, 0x30, 0x52, 0x4d, 0x4a, 0xe5, 0xe9, 0x52, 0xef, 0x6a, 0x5d, 0x0a, 0x78, 0xf0, 0xfe,
        0x28, 0x30, 0x0a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];
    let expected_dg2_hash: [u8; 64] = [
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];
    let (dg2_hash, hash_len) = get_dg2_hash_from_client_data(client_data);
    assert(dg2_hash == expected_dg2_hash);
    assert(hash_len == 32);
}

#[test]
fn test_verify_dg2_hash_in_client_data() {
    // Use the same test data from test_get_dg2_hash_from_client_data
    let client_data: [u8; 169] = [
        0x30, 0x81, 0x97, 0x02, 0x01, 0x01, 0x0c, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x0a, 0x01,
        0x01, 0xa1, 0x81, 0x87, 0x30, 0x81, 0x84, 0x0a, 0x01, 0x01, 0x30, 0x2f, 0x30, 0x0b, 0x06,
        0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x04, 0x20, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x02,
        0x04, 0x05, 0x39, 0x7f, 0xb1, 0x02, 0x04, 0x04, 0x2c, 0x1d, 0x80, 0x04, 0x20, 0xe6, 0xdb,
        0x65, 0xc2, 0xa7, 0xc8, 0x2f, 0x2a, 0xe6, 0x2c, 0xd5, 0x5e, 0x36, 0xab, 0x78, 0x08, 0x9f,
        0xf9, 0x0b, 0x2f, 0x71, 0x85, 0xd5, 0x8d, 0x9e, 0x12, 0xe7, 0x5b, 0x74, 0x54, 0x3b, 0xe9,
        0x04, 0x20, 0x2a, 0x3c, 0x2e, 0x74, 0x6f, 0xeb, 0x93, 0x3a, 0x34, 0x6b, 0xc4, 0xee, 0x74,
        0x98, 0x30, 0x52, 0x4d, 0x4a, 0xe5, 0xe9, 0x52, 0xef, 0x6a, 0x5d, 0x0a, 0x78, 0xf0, 0xfe,
        0x28, 0x30, 0x0a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    // This is the matching dg2_hash that's embedded in the client_data
    let correct_dg2_hash: [u8; 64] = [
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    // Should return true because the hashes match
    let dg2_hash_normalized = poseidon2_hash_packed(correct_dg2_hash, 32);
    let result = verify_dg2_hash_in_client_data(dg2_hash_normalized, client_data);
    assert(result == true);
}

#[test]
fn test_verify_dg2_hash_in_client_data_invalid() {
    // Use the same test data from test_get_dg2_hash_from_client_data
    let client_data: [u8; 169] = [
        0x30, 0x81, 0x97, 0x02, 0x01, 0x01, 0x0c, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x0a, 0x01,
        0x01, 0xa1, 0x81, 0x87, 0x30, 0x81, 0x84, 0x0a, 0x01, 0x01, 0x30, 0x2f, 0x30, 0x0b, 0x06,
        0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x04, 0x20, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x02,
        0x04, 0x05, 0x39, 0x7f, 0xb1, 0x02, 0x04, 0x04, 0x2c, 0x1d, 0x80, 0x04, 0x20, 0xe6, 0xdb,
        0x65, 0xc2, 0xa7, 0xc8, 0x2f, 0x2a, 0xe6, 0x2c, 0xd5, 0x5e, 0x36, 0xab, 0x78, 0x08, 0x9f,
        0xf9, 0x0b, 0x2f, 0x71, 0x85, 0xd5, 0x8d, 0x9e, 0x12, 0xe7, 0x5b, 0x74, 0x54, 0x3b, 0xe9,
        0x04, 0x20, 0x2a, 0x3c, 0x2e, 0x74, 0x6f, 0xeb, 0x93, 0x3a, 0x34, 0x6b, 0xc4, 0xee, 0x74,
        0x98, 0x30, 0x52, 0x4d, 0x4a, 0xe5, 0xe9, 0x52, 0xef, 0x6a, 0x5d, 0x0a, 0x78, 0xf0, 0xfe,
        0x28, 0x30, 0x0a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    // This is a different dg2_hash that should NOT match what's in client_data
    let wrong_dg2_hash: [u8; 64] = [
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
        0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];

    // Should return false because the hashes don't match
    let dg2_hash_normalized = poseidon2_hash_packed(wrong_dg2_hash, 32);
    let result = verify_dg2_hash_in_client_data(dg2_hash_normalized, client_data);
    assert(result == false);
}

#[test]
fn test_get_facematch_mode_from_client_data() {
    let client_data: [u8; 169] = [
        0x30, 0x81, 0x97, 0x02, 0x01, 0x01, 0x0c, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x0a, 0x01,
        0x01, 0xa1, 0x81, 0x87, 0x30, 0x81, 0x84, 0x0a, 0x01, 0x01, 0x30, 0x2f, 0x30, 0x0b, 0x06,
        0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x04, 0x20, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
        0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x02,
        0x04, 0x05, 0x39, 0x7f, 0xb1, 0x02, 0x04, 0x04, 0x2c, 0x1d, 0x80, 0x04, 0x20, 0xe6, 0xdb,
        0x65, 0xc2, 0xa7, 0xc8, 0x2f, 0x2a, 0xe6, 0x2c, 0xd5, 0x5e, 0x36, 0xab, 0x78, 0x08, 0x9f,
        0xf9, 0x0b, 0x2f, 0x71, 0x85, 0xd5, 0x8d, 0x9e, 0x12, 0xe7, 0x5b, 0x74, 0x54, 0x3b, 0xe9,
        0x04, 0x20, 0x2a, 0x3c, 0x2e, 0x74, 0x6f, 0xeb, 0x93, 0x3a, 0x34, 0x6b, 0xc4, 0xee, 0x74,
        0x98, 0x30, 0x52, 0x4d, 0x4a, 0xe5, 0xe9, 0x52, 0xef, 0x6a, 0x5d, 0x0a, 0x78, 0xf0, 0xfe,
        0x28, 0x30, 0x0a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];
    let expected_mode = FACEMATCH_MODE_REGULAR;
    let mode = get_facematch_mode_from_client_data(client_data);
    assert(mode == expected_mode);
}

#[test]
fn test_get_nonce_from_credential_tbs() {
    let credential_tbs: [u8; 850] = [
        0x30, 0x82, 0x03, 0x4c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x98, 0xc0, 0x5b,
        0xa0, 0x4f, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30,
        0x4f, 0x31, 0x23, 0x30, 0x21, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x1a, 0x41, 0x70, 0x70,
        0x6c, 0x65, 0x20, 0x41, 0x70, 0x70, 0x20, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
        0x69, 0x6f, 0x6e, 0x20, 0x43, 0x41, 0x20, 0x31, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x31, 0x38,
        0x30, 0x33, 0x32, 0x34, 0x34, 0x37, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30, 0x36, 0x30, 0x36,
        0x30, 0x35, 0x31, 0x35, 0x34, 0x37, 0x5a, 0x30, 0x81, 0x91, 0x31, 0x49, 0x30, 0x47, 0x06,
        0x03, 0x55, 0x04, 0x03, 0x0c, 0x40, 0x38, 0x35, 0x39, 0x61, 0x39, 0x61, 0x65, 0x35, 0x36,
        0x36, 0x33, 0x62, 0x64, 0x61, 0x64, 0x64, 0x62, 0x63, 0x32, 0x65, 0x32, 0x36, 0x61, 0x36,
        0x64, 0x62, 0x39, 0x33, 0x34, 0x30, 0x33, 0x39, 0x66, 0x33, 0x37, 0x66, 0x38, 0x61, 0x66,
        0x66, 0x62, 0x65, 0x66, 0x38, 0x38, 0x31, 0x35, 0x66, 0x61, 0x66, 0x34, 0x32, 0x62, 0x36,
        0x63, 0x37, 0x33, 0x66, 0x32, 0x38, 0x62, 0x38, 0x63, 0x30, 0x31, 0x1a, 0x30, 0x18, 0x06,
        0x03, 0x55, 0x04, 0x0b, 0x0c, 0x11, 0x41, 0x41, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
        0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31,
        0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,
        0x00, 0x04, 0xd0, 0x06, 0x21, 0x35, 0x49, 0x69, 0xa3, 0x66, 0x36, 0xf2, 0xe1, 0x0d, 0xe8,
        0x19, 0xc8, 0x8a, 0x43, 0xcd, 0xd5, 0x7e, 0x55, 0x76, 0x20, 0x7d, 0x89, 0xbb, 0x73, 0xed,
        0xe0, 0x50, 0x14, 0x59, 0x47, 0xcf, 0xb6, 0xbc, 0x5a, 0x95, 0x61, 0x5b, 0xe6, 0xa3, 0x41,
        0xe7, 0x95, 0x6d, 0x2b, 0xff, 0x67, 0xe5, 0xbb, 0x14, 0x07, 0x10, 0x4b, 0xe1, 0x9a, 0xab,
        0xf1, 0xb3, 0x6e, 0x8c, 0xc9, 0x74, 0xa3, 0x82, 0x01, 0xcf, 0x30, 0x82, 0x01, 0xcb, 0x30,
        0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0e,
        0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x04, 0xf0, 0x30,
        0x81, 0x9f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x05, 0x04, 0x81,
        0x91, 0x30, 0x81, 0x8e, 0xa4, 0x03, 0x02, 0x01, 0x0a, 0xbf, 0x89, 0x30, 0x03, 0x02, 0x01,
        0x01, 0xbf, 0x89, 0x31, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x32, 0x03, 0x02, 0x01, 0x01,
        0xbf, 0x89, 0x33, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x89, 0x34, 0x2f, 0x04, 0x2d, 0x59, 0x4c,
        0x35, 0x4d, 0x53, 0x33, 0x5a, 0x36, 0x33, 0x39, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x7a, 0x6b,
        0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x61, 0x74, 0x74,
        0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0xa5, 0x06,
        0x04, 0x04, 0x73, 0x6b, 0x73, 0x20, 0xbf, 0x89, 0x36, 0x03, 0x02, 0x01, 0x05, 0xbf, 0x89,
        0x37, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x39, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3a,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x89, 0x3b, 0x03, 0x02, 0x01, 0x00, 0xaa, 0x03, 0x02, 0x01,
        0x00, 0xbf, 0x89, 0x3c, 0x06, 0x02, 0x04, 0x73, 0x6b, 0x73, 0x20, 0x30, 0x81, 0xd3, 0x06,
        0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x07, 0x04, 0x81, 0xc5, 0x30, 0x81,
        0xc2, 0xbf, 0x8a, 0x78, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x88,
        0x50, 0x03, 0x02, 0x01, 0x02, 0xbf, 0x8a, 0x79, 0x09, 0x04, 0x07, 0x31, 0x2e, 0x30, 0x2e,
        0x31, 0x39, 0x38, 0xbf, 0x8a, 0x7b, 0x07, 0x04, 0x05, 0x32, 0x32, 0x47, 0x39, 0x30, 0xbf,
        0x8a, 0x7c, 0x08, 0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7d, 0x08,
        0x04, 0x06, 0x31, 0x38, 0x2e, 0x36, 0x2e, 0x31, 0xbf, 0x8a, 0x7e, 0x03, 0x02, 0x01, 0x00,
        0xbf, 0x8a, 0x7f, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x00, 0x03, 0x02, 0x01, 0x00, 0xbf,
        0x8b, 0x01, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x02, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b,
        0x03, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x04, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x8b, 0x05,
        0x03, 0x02, 0x01, 0x00, 0xbf, 0x8b, 0x0a, 0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e,
        0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0b, 0x0f, 0x04, 0x0d, 0x32,
        0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0xbf, 0x8b, 0x0c,
        0x0f, 0x04, 0x0d, 0x32, 0x32, 0x2e, 0x37, 0x2e, 0x39, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2c,
        0x30, 0xbf, 0x88, 0x02, 0x0a, 0x04, 0x08, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6f, 0x73,
        0x30, 0x33, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x63, 0x64, 0x08, 0x02, 0x04, 0x26,
        0x30, 0x24, 0xa1, 0x22, 0x04, 0x20, 0x04, 0x2e, 0x77, 0x46, 0x8c, 0xb5, 0x99, 0xb8, 0x31,
        0x05, 0x8f, 0x83, 0x69, 0xca, 0x10, 0x80, 0x97, 0xfa, 0x34, 0x1e, 0x75, 0xa4, 0x4d, 0x38,
        0xb5, 0x1b, 0x74, 0xa1, 0x5f, 0xea, 0xa1, 0xa7, 0x00, 0x00,
    ];

    // Extract the nonce from the TBS certificate
    let nonce = get_nonce_from_credential_tbs(credential_tbs);

    // The expected nonce is the 32 bytes starting at the end of the TBS data
    // Looking at the credential_tbs data, the nonce should be:
    // 04 2e 77 46 8c b5 99 b8 31 05 8f 83 69 ca 10 80 97 fa 34 1e 75 a4 4d 38 b5 1b 74 a1 5f ea a1 a7
    let expected_nonce = [
        0x04, 0x2e, 0x77, 0x46, 0x8c, 0xb5, 0x99, 0xb8, 0x31, 0x05, 0x8f, 0x83, 0x69, 0xca, 0x10,
        0x80, 0x97, 0xfa, 0x34, 0x1e, 0x75, 0xa4, 0x4d, 0x38, 0xb5, 0x1b, 0x74, 0xa1, 0x5f, 0xea,
        0xa1, 0xa7,
    ];

    // Verify the extracted nonce matches the expected value
    for i in 0..32 {
        assert_eq(nonce[i], expected_nonce[i], "Nonce mismatch");
    }
}
