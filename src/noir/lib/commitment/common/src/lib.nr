//use std::hash::pedersen_hash;
use std::hash::poseidon2::Poseidon2;
use utils::PASSPORT_MRZ_COUNTRY_INDEX;

pub global CSC_CERT_TYPE: Field = 1;
pub global DSC_CERT_TYPE: Field = 2;

pub fn calculate_scoped_nullifier(
    private_nullifier: Field,
    service_scope: Field,
    service_subscope: Field,
) -> Field {
    Poseidon2::hash([private_nullifier, service_scope, service_subscope], 3)
}

pub fn calculate_certificate_registry_leaf<let N: u32>(
    registry_id: Field,
    cert_type: Field,
    country: str<3>,
    csc_pubkey: [u8; N],
) -> Field {
    let country_bytes: [u8; 3] = country.as_bytes();
    let mut result: [Field; N + 5] = [0; N + 5];
    result[0] = registry_id as Field;
    result[1] = cert_type as Field;
    result[2] = country_bytes[0] as Field;
    result[3] = country_bytes[1] as Field;
    result[4] = country_bytes[2] as Field;
    for i in 0..N {
        result[i + 5] = csc_pubkey[i] as Field;
    }
    Poseidon2::hash(result, N + 5)
}

pub fn get_country_from_dg1(dg1: [u8; 95]) -> str<3> {
    // There 5 padding bytes in the dg1 before the actual MRZ
    let country_offset = 5 + PASSPORT_MRZ_COUNTRY_INDEX;
    let mut country_bytes: [u8; 3] = [0; 3];
    for i in 0..3 {
        country_bytes[i] = dg1[country_offset + i];
    }
    country_bytes.as_str_unchecked()
}

pub fn hash_salt_country_tbs<let TBS_MAX_SIZE: u32>(
    salt: Field,
    country: str<3>,
    tbs: [u8; TBS_MAX_SIZE],
) -> Field {
    let country_bytes: [u8; 3] = country.as_bytes();
    let mut result: [Field; TBS_MAX_SIZE + 4] = [0; TBS_MAX_SIZE + 4];
    result[0] = salt as Field;
    result[1] = country_bytes[0] as Field;
    result[2] = country_bytes[1] as Field;
    result[3] = country_bytes[2] as Field;
    for i in 0..TBS_MAX_SIZE {
        result[4 + i] = tbs[i] as Field;
    }
    Poseidon2::hash(result, TBS_MAX_SIZE + 4)
}

pub fn hash_salt_dg1_private_nullifier<let N: u32>(
    salt: Field,
    dg1: [u8; N],
    private_nullifier: Field,
) -> Field {
    let mut result: [Field; N + 2] = [0; N + 2];
    result[0] = salt as Field;
    for i in 0..N {
        result[1 + i] = dg1[i] as Field;
    }
    result[1 + N] = private_nullifier;
    Poseidon2::hash(result, N + 2)
}

pub fn calculate_private_nullifier<let DG1: u32, let SIG: u32>(
    dg1: [u8; DG1],
    sod_sig: [u8; SIG],
) -> Field {
    let mut result: [Field; DG1 + SIG] = [0; DG1 + SIG];
    for i in 0..DG1 {
        result[i] = dg1[i] as Field;
    }
    for i in 0..SIG {
        result[DG1 + i] = sod_sig[i] as Field;
    }
    Poseidon2::hash(result, DG1 + SIG)
}

pub fn hash_salt_country_signed_attr_dg1_private_nullifier<let SA: u32>(
    salt: Field,
    country: str<3>,
    signed_attr: [u8; SA],
    signed_attr_size: Field,
    dg1: [u8; 95],
    private_nullifier: Field,
) -> Field {
    let country_bytes: [u8; 3] = country.as_bytes();
    let mut result: [Field; SA + 101] = [0; SA + 101];
    result[0] = salt as Field;
    result[1] = country_bytes[0] as Field;
    result[2] = country_bytes[1] as Field;
    result[3] = country_bytes[2] as Field;
    for i in 0..SA {
        result[4 + i] = signed_attr[i] as Field;
    }
    result[4 + SA] = signed_attr_size;
    for i in 0..95 {
        result[4 + SA + 1 + i] = dg1[i] as Field;
    }
    result[4 + SA + 1 + 95] = private_nullifier;
    Poseidon2::hash(result, SA + 101)
}

// Returns the merkle root of the tree from the provided leaf, index and hash_path, using the Poseidon2 hash function
// Arity is expected to be 2 and the the tree depth is equal to the hash_path array length
pub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {
    let index_bits: [u1; N] = index.to_le_bits();
    let mut current = leaf;
    for i in 0..N {
        let path_bit = index_bits[i] as bool;
        let (hash_left, hash_right) = if path_bit {
            (hash_path[i], current)
        } else {
            (current, hash_path[i])
        };
        current = Poseidon2::hash([hash_left, hash_right], 2);
    }
    current
}

#[test]
fn test_compute_merkle_root1() {
    let leaf = 0x2fe190f39de3fcf4cbc2eb334d0dc76e4d06f2350aa6056c91ff5f11ded9fb4a;
    let index = 0;
    let hash_path = [
        0x00,
        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1,
        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290,
        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20,
        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e,
        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf,
        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76,
        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b,
        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1,
        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972,
        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686,
        0x0f320b0703439a8114f81593de99cd0b8f3b9bf854601abb5b2ea0e8a3dda4a7,
        0x0d07f6e7a8a0e9199d6d92801fff867002ff5b4808962f9da2ba5ce1bdd26a73,
        0x1c4954081e324939350febc2b918a293ebcdaead01be95ec02fcbe8d2c1635d1
    ];
    let root = compute_merkle_root(leaf, index, hash_path);
    assert(root == 0x0742857aba0058b2167c4ac94fede8ec480600911aa871153b988c3f71095449);
}

#[test]
fn test_compute_merkle_root2() {
    let e00 = Poseidon2::hash([1], 1);
    let e01 = Poseidon2::hash([1], 1);
    let e02 = Poseidon2::hash([1], 1);
    let e03 = Poseidon2::hash([1], 1);
    assert(e00 == 0x168758332d5b3e2d13be8048c8011b454590e06c44bce7f702f09103eef5a373);

    let e10 = Poseidon2::hash([e00, e01], 2);
    let e11 = Poseidon2::hash([e02, e03], 2);
    assert(e10 == 0x113d8ff59c2e15d711241797c380264e39dc1b9e00f2713e707d8d7773b6d912);

    let expected_root = Poseidon2::hash([e10, e11], 2);
    assert(expected_root == 0x0f4f16b234c1d5054b15d408282cb45ba6c10a629fe068e7f3cc253ceae4f08d);

    let hash_path = [e01, e10];
    assert(hash_path == [
        0x168758332d5b3e2d13be8048c8011b454590e06c44bce7f702f09103eef5a373,
        0x113d8ff59c2e15d711241797c380264e39dc1b9e00f2713e707d8d7773b6d912
    ]);

    let leaf = Poseidon2::hash([1], 1);
    let index = 0;
    let root = compute_merkle_root(leaf, index, hash_path);
    assert(root == 0x0f4f16b234c1d5054b15d408282cb45ba6c10a629fe068e7f3cc253ceae4f08d);
}

pub fn get_vkey_hash<let N: u32>(vkey: [Field; N]) -> Field {
    Poseidon2::hash(vkey, N)
}

#[test]
fn test_get_vkey_hash() {
    let vkey = [
        0x0000000000000000000000000000000000000000000000000000000000004000,
        0x000000000000000000000000000000000000000000000000000000000000001e,
        0x0000000000000000000000000000000000000000000000000000000000000001,
        0x0000000000000000000000000000000000000000000000000000000000000001,
        0x000000000000000000000000000000000000000000000000000000000000000e,
        0x000000000000000000000000000000000000000000000000000000000000000f,
        0x0000000000000000000000000000000000000000000000000000000000000010,
        0x0000000000000000000000000000000000000000000000000000000000000011,
        0x0000000000000000000000000000000000000000000000000000000000000012,
        0x0000000000000000000000000000000000000000000000000000000000000013,
        0x0000000000000000000000000000000000000000000000000000000000000014,
        0x0000000000000000000000000000000000000000000000000000000000000015,
        0x0000000000000000000000000000000000000000000000000000000000000016,
        0x0000000000000000000000000000000000000000000000000000000000000017,
        0x0000000000000000000000000000000000000000000000000000000000000018,
        0x0000000000000000000000000000000000000000000000000000000000000019,
        0x000000000000000000000000000000000000000000000000000000000000001a,
        0x000000000000000000000000000000000000000000000000000000000000001b,
        0x000000000000000000000000000000000000000000000000000000000000001c,
        0x000000000000000000000000000000000000000000000000000000000000001d,
        0x000000000000000000000000000000014d18053025847e890b73d1bd851d8010,
        0x00000000000000000000000000000000001604875484cd0af6333f892d9db03c,
        0x0000000000000000000000000000001aa505665b96ff23e66c8cc50617d912dd,
        0x000000000000000000000000000000000023761d0fc8b989dd96889c0e1dd500,
        0x0000000000000000000000000000005ec6b7adcaad33a31d00c481cada512ff2,
        0x00000000000000000000000000000000000619dc9f99c6e6318f58a3cd578e03,
        0x000000000000000000000000000000ca65a4903d4105e8ffb945a804fe5e758b,
        0x0000000000000000000000000000000000013d6fe1a9ccad8cf0da0cbb325a50,
        0x000000000000000000000000000000c3d521df3cd944a41cc6c93814e4bfb108,
        0x00000000000000000000000000000000002967d970e732ce06f745a1676e907a,
        0x000000000000000000000000000000bea006927efee453f22d7e5001156d8236,
        0x000000000000000000000000000000000003da37e3170387f7fc7fe67f3fd02d,
        0x0000000000000000000000000000007ecadab7d0191e9b27b8c118bcf63e39d7,
        0x00000000000000000000000000000000001aceee76600298bda7debc2a13e65f,
        0x00000000000000000000000000000094109ace5115b62b817510419b345bafb3,
        0x000000000000000000000000000000000007478caa1879b0d66eafb700c8eaff,
        0x000000000000000000000000000000c66580c6bd58511b6f734408a36072b4cb,
        0x000000000000000000000000000000000012a966c244f2d7aef31bf501d4c7b3,
        0x00000000000000000000000000000066953254478df3e72cd967c81f9d7520dd,
        0x000000000000000000000000000000000012836bbc2291cc1a76e191beeeff55,
        0x00000000000000000000000000000085f16f224863af3a2eb1640916d6e2f661,
        0x00000000000000000000000000000000001d2c4076e8dcb9be0e997d8c5715d9,
        0x000000000000000000000000000000e7e736564c69478322d60bf28db04d2180,
        0x000000000000000000000000000000000001bac3d335ee7aece9c8e8b83c4a0a,
        0x000000000000000000000000000000418412d57fe3f9d88befaf72e3f049aed6,
        0x00000000000000000000000000000000002640a81c852ebd44791d208778e3d4,
        0x0000000000000000000000000000003f0de2660faefec496cddfcf172d70f88a,
        0x000000000000000000000000000000000023f365597e5a0fe284fe40ba6df049,
        0x0000000000000000000000000000001ff3fdb800a12685d0225869a709c59ea1,
        0x000000000000000000000000000000000010485496ac517ce4626468b80c20d1,
        0x000000000000000000000000000000eae802a6cf93d2041722bcc7b827850d9c,
        0x00000000000000000000000000000000002c3eb537afd8670ec12382677e9dfd,
        0x000000000000000000000000000000da72208a8ea7aa2e70b8fc00cf95fbe413,
        0x00000000000000000000000000000000001994c139d6d63fbb02a95416dd2057,
        0x0000000000000000000000000000000c243e99da3df894bd68564c1f2189c436,
        0x000000000000000000000000000000000004714d9481f6dbd276728639c54996,
        0x0000000000000000000000000000007ffd262875ae684deba001fcc5fdea3bbf,
        0x000000000000000000000000000000000026c3846eed3340f6f2e861943f6f27,
        0x0000000000000000000000000000009e45b69b687387629e72688f33382df553,
        0x000000000000000000000000000000000017612f582a3500568851ebdcb62e72,
        0x000000000000000000000000000000898a13479bd1c1e27a6e0681a5d43985af,
        0x000000000000000000000000000000000002f9352d7ab76f7b9eda17515fd7b8,
        0x0000000000000000000000000000003c13860bb6a8f804652839fa9abe19bb7b,
        0x00000000000000000000000000000000000ea81714a4cd7294ac6300617eb610,
        0x000000000000000000000000000000dc6620bff3175f56800f1e44c3e79b256e,
        0x000000000000000000000000000000000003c53e0fb2f68008220ac57a71c7f4,
        0x000000000000000000000000000000ab9926a5dd872d669530c99c7d9be65720,
        0x00000000000000000000000000000000002ea70327e45061f95597e2ccf26540,
        0x00000000000000000000000000000032d9d845b89a70f07980c48344f7a599e6,
        0x000000000000000000000000000000000020828423a9331f84edb915eeb4733d,
        0x000000000000000000000000000000f020304aa06e327c9294f1254859db8ab6,
        0x00000000000000000000000000000000001f5964632befb3e8707483b77e7881,
        0x0000000000000000000000000000004d882ed48ddc17fda49a2e3c07bfa0b4a7,
        0x0000000000000000000000000000000000238a9bda3f2d414f43b6d68db016da,
        0x000000000000000000000000000000871bf5d454ed7a84525d3d52325dfb377c,
        0x000000000000000000000000000000000007584c1032621909192d308449ced1,
        0x0000000000000000000000000000005b72000fb18ad1bd936839038a2bc2b9e5,
        0x0000000000000000000000000000000000268cfce53a1c077c835540eb73a23c,
        0x00000000000000000000000000000000c747ae5e9a310b1d8baa8c34f92e8d0e,
        0x00000000000000000000000000000000002701e27eec246967ec650bbe990bab,
        0x000000000000000000000000000000a6783a604d35e125327e5fe8cf22398fdd,
        0x00000000000000000000000000000000002309c7ceac11535749dab8c9f4d851,
        0x00000000000000000000000000000065720cd086bae46f673f548239ceafb0b4,
        0x00000000000000000000000000000000000a8ac00f8a2042f8f81c554dc404f6,
        0x000000000000000000000000000000907c095579b757be6b50e41dc3692a224c,
        0x00000000000000000000000000000000000a45377f92a8d6d44afe54e3717f8a,
        0x000000000000000000000000000000d8642735ec11ef526dcffa791f1ad641ab,
        0x00000000000000000000000000000000001e4fbc154b0c6b4c559f58a7d19ac0,
        0x000000000000000000000000000000eff01a355a79835cc29ccf88cd9e3ca07f,
        0x00000000000000000000000000000000002af5e29ca00459725e2680c6a78a6f,
        0x000000000000000000000000000000da6c16f1483ae4228c68cc091f40d39aad,
        0x00000000000000000000000000000000000ea734a85cf7a6d1d775a08afc61e0,
        0x000000000000000000000000000000fd722ec69b8a01085785be11e41f873afe,
        0x000000000000000000000000000000000006b8a63c9cf273d4724fbb10d5f57a,
        0x000000000000000000000000000000f7d9fd5e858349061430d351c45499dfad,
        0x0000000000000000000000000000000000046edaae51ba84f2dabcd56e9eed5b,
        0x0000000000000000000000000000002f225a95524043ea68cc704f77ef4f6045,
        0x0000000000000000000000000000000000038d07b151361621e074699b374a85,
        0x000000000000000000000000000000da6a36c7ae48c4791868c3d10c8533fe6e,
        0x000000000000000000000000000000000014ce118be5ef951902f6e84a561e88,
        0x000000000000000000000000000000beabc4f9b42059a77a1b15b98856b48453,
        0x00000000000000000000000000000000002114644c4953246a959f25a4bf2052,
        0x0000000000000000000000000000009d10f2f38322da8ecb0b296bc729ff1c4e,
        0x000000000000000000000000000000000027f1245b7ec2b0cb360bb134218ed1,
        0x00000000000000000000000000000032957a466beb19e0675e0f739616187ecd,
        0x0000000000000000000000000000000000235e20011670e41d045fd8446ae100,
        0x000000000000000000000000000000691d28ce28c9ae3f7e8d3220cbfdb0fd36,
        0x000000000000000000000000000000000004d8e62001cadc95344edcfd429fed,
        0x0000000000000000000000000000008a34b9ab23bd2cd471701a5a76de4076b8,
        0x00000000000000000000000000000000002c853787226778520baf3c5f0ed65e,
        0x000000000000000000000000000000f357d89b0302e34eac204bc55974f0c37b,
        0x00000000000000000000000000000000001a04dfa8543c150c4f07b768f1752d,
        0x000000000000000000000000000000709f2727a8adda78f9cd125c85fc061557,
        0x0000000000000000000000000000000000180b5e9b2901b08360c598f18581d0,
        0x0000000000000000000000000000003f99f9fd98707c98fd62328a676c38bb38,
        0x000000000000000000000000000000000004880ff78661543813929232e5c4db,
        0x0000000000000000000000000000003fb3d6fdb1fe407fc26479a67309987378,
        0x0000000000000000000000000000000000152830347b8e35a842ea020f557635,
        0x0000000000000000000000000000004aed3df71695a6a5295e2117cc6c0a80df,
        0x0000000000000000000000000000000000007ee2c78519eb92faa04d10b2ae9e,
        0x0000000000000000000000000000000000000000000000000000000000000001,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000002,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x000000000000000000000000000000feb33855ac28e08d8b02991fb3f3c211cf,
        0x000000000000000000000000000000000007d8476506cdef23b023ca072ed709,
        0x000000000000000000000000000000e985e0b015edca55f69192bdb7139b7224,
        0x000000000000000000000000000000000020470f3258600e780b46d6c7db1bc6
    ];
    let vkey_hash = get_vkey_hash(vkey);
    assert(vkey_hash == 0x159c7f9777839c2449c0a0f90b411569ed72aaa9d090c82c9c028adf5419d3d6);
}
