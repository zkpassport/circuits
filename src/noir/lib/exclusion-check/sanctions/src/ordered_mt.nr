// c.t. /self/noir/crates/dg1/src/utils/
use crate::types::{
    SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH, SanctionsOrderedMerkleTreeInclusionProof,
    SanctionsOrderedMerkleTreeProof,
};
use poseidon::poseidon2::Poseidon2;

///
/// Ordered Merkle Tree Inclusion Proof
///
/// Performs a normal merkle tree inclusion proof
///
pub fn ordered_mt_verify_inclusion(
    root: Field,
    inclusion_proof: SanctionsOrderedMerkleTreeInclusionProof,
) {
    let path_in_bits: [u1; SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH] =
        inclusion_proof.leaf_index.to_be_bits::<SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH>();

    let mut current = inclusion_proof.leaf;
    for i in 0..SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH {
        let (left, right) = if path_in_bits[SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH - i - 1] == 1 {
            (inclusion_proof.sibling_path[i], current)
        } else {
            (current, inclusion_proof.sibling_path[i])
        };

        current = Poseidon2::hash([left, right], 2);
    }
    assert(current == root);
}

pub fn ordered_mt_non_membership(root: Field, leaf: Field, proof: SanctionsOrderedMerkleTreeProof) {
    // Perform inclusion checks for bothe the closest upper and the closest lower
    ordered_mt_verify_inclusion(root, proof.left);
    ordered_mt_verify_inclusion(root, proof.right);

    // Check that the closest upper and closest lower are lower / greater than the leaf value
    assert(proof.left.leaf.lt(leaf));
    assert(leaf.lt(proof.right.leaf));

    // Check that their indexes are adjacent
    assert(proof.left.leaf_index + 1 == proof.right.leaf_index);
}

#[test]
fn test_ordered_mt_non_membership() {
    // Run yarn generate-sanction-test-data to generate the test data
    // const passportNoAndCountrySMT = await AsyncOrderedMT.fromSerialized(passportNoAndCountryJso, poseidon2)
    // const passportNoAndCountryNonMembershipProof = await passportNoAndCountrySMT.createNonMembershipProof(1n);
    // console.log(passportNoAndCountryNonMembershipProof);

    let root = 0x1079bc5626177edfe7be9c9f7ff8d98715d57838af41dbdb657d0d539589d562;
    let leaf = 1;
    let closest_lower_proof = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0,
        leaf_index: 0,
        sibling_path: [
            2538969154464207075551963849493461100763984781772059631317977345015494,
            7408567622264251325527675560234305459782199557670748003992045507255676782346,
            17172503195274368373973764532145219118560142872605990247328955843400030737405,
            21527630554632879813368054281177817606242864379795907214239176075955007902912,
            18699126562668176235057823815067222211248876631773067142149349644662028539852,
            1138014874575396376434294449250341343519995927350497111552199997611911383279,
            17692990063003768316252898968705636568574530123211168530193325849238530584452,
            2938816609703607893594268326553741117329716829647558707578741554571824726795,
            18531272354629860245936057472634855442371125444511384756380668763496725060738,
            16861757300510539122464918186666819723475585473714947518469612839461640325318,
            19198835320966671159362471103434629797847848853725809587444004126259292262957,
            1434071382017752851854174663872170738349379295629237983335808344452683029501,
            17214515713235328023946595279497595493989754031586012833567390016218310925047,
            20520942595052823932948743104356975592514206907287748412703532919562075594682,
            5602825907154123685010743523956720963636970551794454632829642895716903942597,
            1422994654356092138536825598618436060486605061183646776786639611356403240263,
            5042802630641403920974617864550092647133845650337096664008357172644603542641,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };
    let closest_upper_proof = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 2538969154464207075551963849493461100763984781772059631317977345015494,
        leaf_index: 1,
        sibling_path: [
            0,
            7408567622264251325527675560234305459782199557670748003992045507255676782346,
            17172503195274368373973764532145219118560142872605990247328955843400030737405,
            21527630554632879813368054281177817606242864379795907214239176075955007902912,
            18699126562668176235057823815067222211248876631773067142149349644662028539852,
            1138014874575396376434294449250341343519995927350497111552199997611911383279,
            17692990063003768316252898968705636568574530123211168530193325849238530584452,
            2938816609703607893594268326553741117329716829647558707578741554571824726795,
            18531272354629860245936057472634855442371125444511384756380668763496725060738,
            16861757300510539122464918186666819723475585473714947518469612839461640325318,
            19198835320966671159362471103434629797847848853725809587444004126259292262957,
            1434071382017752851854174663872170738349379295629237983335808344452683029501,
            17214515713235328023946595279497595493989754031586012833567390016218310925047,
            20520942595052823932948743104356975592514206907287748412703532919562075594682,
            5602825907154123685010743523956720963636970551794454632829642895716903942597,
            1422994654356092138536825598618436060486605061183646776786639611356403240263,
            5042802630641403920974617864550092647133845650337096664008357172644603542641,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };

    let proof =
        SanctionsOrderedMerkleTreeProof { left: closest_lower_proof, right: closest_upper_proof };

    ordered_mt_non_membership(root, leaf, proof);
}
