// c.t. /self/noir/crates/dg1/src/utils/
use crate::types::{
    SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH, SanctionsOrderedMerkleTreeInclusionProof,
    SanctionsOrderedMerkleTreeProof,
};
use poseidon::poseidon2::Poseidon2;

///
/// Ordered Merkle Tree Inclusion Proof
///
/// Performs a normal merkle tree inclusion proof
///
pub fn ordered_mt_verify_inclusion(
    root: Field,
    inclusion_proof: SanctionsOrderedMerkleTreeInclusionProof,
) {
    let path_in_bits: [u1; SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH] =
        inclusion_proof.leaf_index.to_be_bits::<SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH>();

    let mut current = inclusion_proof.leaf;
    for i in 0..SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH {
        let (left, right) = if path_in_bits[SANCTIONS_ORDERED_MERKLE_TREE_LEAF_DEPTH - i - 1] == 1 {
            (inclusion_proof.sibling_path[i], current)
        } else {
            (current, inclusion_proof.sibling_path[i])
        };

        current = Poseidon2::hash([left, right], 2);
    }
    assert(current == root);
}

pub fn ordered_mt_non_membership(root: Field, leaf: Field, proof: SanctionsOrderedMerkleTreeProof) {
    // Perform inclusion checks for bothe the closest upper and the closest lower
    ordered_mt_verify_inclusion(root, proof.left);
    ordered_mt_verify_inclusion(root, proof.right);

    // Check that the closest upper and closest lower are lower / greater than the leaf value
    assert(proof.left.leaf.lt(leaf));
    assert(leaf.lt(proof.right.leaf));

    // Check that their indexes are adjacent
    assert(proof.left.leaf_index + 1 == proof.right.leaf_index);
}

#[test]
fn test_ordered_mt_non_membership() {
    // Run yarn generate-sanction-test-data to generate the test data
    // const passportNoAndCountrySMT = await AsyncOrderedMT.fromSerialized(passportNoAndCountryJso, poseidon2)
    // const passportNoAndCountryNonMembershipProof = await passportNoAndCountrySMT.createNonMembershipProof(1n);
    // console.log(passportNoAndCountryNonMembershipProof);

    let root = 0x06caac33440d8a83b838f07ba0e2bbe7e9889f10915efcb37396534f1feadac5;
    let leaf = 1;
    let closest_lower_proof = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0,
        leaf_index: 0,
        sibling_path: [
            2538969154464207075551963849493461100763984781772059631317977345015494,
            7408567622264251325527675560234305459782199557670748003992045507255676782346,
            17172503195274368373973764532145219118560142872605990247328955843400030737405,
            21527630554632879813368054281177817606242864379795907214239176075955007902912,
            18699126562668176235057823815067222211248876631773067142149349644662028539852,
            15855547126666558158108890886036128838123609376466069853621349658242826003996,
            18096792214306805418846341841781764327280296975829390385578507005497037463148,
            4882445789907605022811992043069539558472414294163826085271470580313337999406,
            16053354931905793903685412466246134688474814165207331604886125072612196680241,
            3396847249872894248857523484515784266052422898507254149535419922174645272355,
            18445344656590747902642614900015537005931447962637142044356671182767079047806,
            18820138521757667575505291311223932864682153951596251749778606261768461287703,
            13266561301471257258539044592892442240556507457562242352281174682693065357580,
            9295065156886282224341478908698448565384819123602296403920973906630830832025,
            5019181415106207781408050313923556940335758386868045756608045713679758661105,
            6170047750834888331597810312282160751025283295819884664149158819731763951095,
            18603683295116425944172923198605921892107095987681914655028475372448354804282,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };
    let closest_upper_proof = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 2538969154464207075551963849493461100763984781772059631317977345015494,
        leaf_index: 1,
        sibling_path: [
            0,
            7408567622264251325527675560234305459782199557670748003992045507255676782346,
            17172503195274368373973764532145219118560142872605990247328955843400030737405,
            21527630554632879813368054281177817606242864379795907214239176075955007902912,
            18699126562668176235057823815067222211248876631773067142149349644662028539852,
            15855547126666558158108890886036128838123609376466069853621349658242826003996,
            18096792214306805418846341841781764327280296975829390385578507005497037463148,
            4882445789907605022811992043069539558472414294163826085271470580313337999406,
            16053354931905793903685412466246134688474814165207331604886125072612196680241,
            3396847249872894248857523484515784266052422898507254149535419922174645272355,
            18445344656590747902642614900015537005931447962637142044356671182767079047806,
            18820138521757667575505291311223932864682153951596251749778606261768461287703,
            13266561301471257258539044592892442240556507457562242352281174682693065357580,
            9295065156886282224341478908698448565384819123602296403920973906630830832025,
            5019181415106207781408050313923556940335758386868045756608045713679758661105,
            6170047750834888331597810312282160751025283295819884664149158819731763951095,
            18603683295116425944172923198605921892107095987681914655028475372448354804282,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };

    let proof =
        SanctionsOrderedMerkleTreeProof { left: closest_lower_proof, right: closest_upper_proof };

    ordered_mt_non_membership(root, leaf, proof);
}
