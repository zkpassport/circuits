use super::{get_last_name_and_first_name_from_mrz, process_name, SanctionsSparseMerkleTrees};
use super::ordered_mt::ordered_mt_verify_inclusion;
use super::types::{
    SanctionsOrderedMerkleTreeInclusionProof, SanctionsOrderedMerkleTreeProof,
    SanctionsOrderedMerkleTreeProofs,
};
use poseidon::poseidon2::Poseidon2;
use utils::{
    constants::PASSPORT_MRZ_NAME_LENGTH, get_name_from_mrz, tests::DG1Builder, u8_array_to_fields,
};

#[test]
fn test_process_name() {
    let unusual_mrz_name = "DOE<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes();
    let processed_name = process_name(unusual_mrz_name);
    // The separator between the last name and the first name should have been corrected
    // to meet the standard MRZ name formatting (i.e. LASTNAME<<FIRSTNAME)
    assert_eq(processed_name, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());

    let correct_mrz_name = "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes();
    // The processed name should be the same as the original one
    // since it is already in the correct format
    assert_eq(processed_name, correct_mrz_name);
}

#[test]
fn test_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // Should retrieve the last name and first given name
    assert_eq(name_1, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should retrieve the last name, the first and second given (or middle) names
    assert_eq(name_2, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should be the same as above since there's nothing beyond the middle name
    assert_eq(name_3, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
}

#[test]
fn test_long_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<JOHN<MILLER<JUNIOR<THE<SECOND<<<<<".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<JOHN<MILLER<JUNIOR<THE<SECOND<<<<<".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // Should retrieve the last name and first given name
    assert_eq(name_1, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should retrieve the last name, the first and second given (or middle) names
    assert_eq(name_2, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should retrieve the last name, the first, second and third given names
    assert_eq(name_3, "DOE<<JOHN<MILLER<JUNIOR<<<<<<<<<<<<<<<<".as_bytes());
}

#[test]
fn test_short_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // They should all return the same as there is only one give name
    assert_eq(name_1, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_2, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_3, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
}

#[test]
fn test_full_mrz_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<JOHN<MILLER<JUNIOR<THE<SECOND<EMPE".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<JOHN<MILLER<JUNIOR<THE<SECOND<EMPE".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // Should retrieve the last name and first given name
    assert_eq(name_1, "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should retrieve the last name, the first and second given (or middle) names
    assert_eq(name_2, "DOE<<JOHN<MILLER<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    // Should retrieve the last name, the first, second and third given names
    assert_eq(name_3, "DOE<<JOHN<MILLER<JUNIOR<<<<<<<<<<<<<<<<".as_bytes());
}

#[test]
fn test_long_first_given_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<SUPERCALIFRAGILISTICEXPIALIDOCIOUS".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<SUPERCALIFRAGILISTICEXPIALIDOCIOUS".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // This first given name is super long, so no space for other names
    // All of three name combinations return the full name from the MRZ
    assert_eq(name_1, "DOE<<SUPERCALIFRAGILISTICEXPIALIDOCIOUS".as_bytes());
    assert_eq(name_2, "DOE<<SUPERCALIFRAGILISTICEXPIALIDOCIOUS".as_bytes());
    assert_eq(name_3, "DOE<<SUPERCALIFRAGILISTICEXPIALIDOCIOUS".as_bytes());
}

#[test]
fn test_long_second_given_name_retrieval_from_dg1() {
    let passport_no = "123456789".as_bytes();
    let dob = "900112".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<SUPERCALIFRAGILISTIC<EXPIALIDOCIOU".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let full_name = get_name_from_mrz(dg1);
    // Should be the same full name as initialized above
    assert_eq(full_name, "DOE<<SUPERCALIFRAGILISTIC<EXPIALIDOCIOU".as_bytes());

    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);
    // The first name and second name take all the space, so no room for a third
    // The first name combination returns just the last name and first given name
    assert_eq(name_1, "DOE<<SUPERCALIFRAGILISTIC<<<<<<<<<<<<<<".as_bytes());
    // while the second combination returns the full MRZ name
    assert_eq(name_2, "DOE<<SUPERCALIFRAGILISTIC<EXPIALIDOCIOU".as_bytes());
    // and so does the third since there's no room for a third given name
    assert_eq(name_3, "DOE<<SUPERCALIFRAGILISTIC<EXPIALIDOCIOU".as_bytes());
}

#[test]
fn test_non_inclusion_of_dg1() {
    // Provide the non inclusion proofs for an empty dg1
    // name = 'DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<',
    // dob = '900112',
    // year = '90',
    // passport no = 123456789
    // country = United Kingdom

    let passport_no = "123456789".as_bytes();
    let country = "GBR".as_bytes();
    let name = "DOE<<JOHN<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dob = "900112".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    let name_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 8956333565342100626175684213002399724701754566975930761671412343567175376742,
            leaf_index: 51593,
            sibling_path: [
                8956305397887706548947467917432368310894119267665310574331312227313411265134,
                1591120206616175795870232267773251984825068517407387174975635279974067926371,
                16969395441223965267956801463617438551170619544519933668094428186326013452432,
                12722416459856144664961119142750367093020138265354979344147714571102471165663,
                9877578740075321285338349967107768707558172152818712161401418075364134032914,
                9462051373244237763893674566436629662815600358438718027312965399322214905738,
                5981465055244570025758375013728857801808507541381791615023562018708670499750,
                7008611329667300025930163583922313669229510724997251198196463150192376359077,
                7430092275982209248149380709910416506860531075248379624377138719573005807557,
                2539223405343873722544228890873340306288699692440681928258626679764767852271,
                11388761669303640281268750629515116538445832677239394545218414812990178691609,
                21846682940769700317251668820007414496451237708822098701178908893455710019812,
                1128828666413400385476274889803792632277402843777785901787911744596226244699,
                10137962158573734050162686176154332483946400485913588436121049706320967897922,
                20865758332970325045263219825193635787614754990818729783792516628094684528923,
                21492147508593555798954276854884538585208918386284299128827770232157281300008,
                18603683295116425944172923198605921892107095987681914655028475372448354804282,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 8956500318397858565112995016720085659827620516307512068909343396650685795378,
            leaf_index: 51594,
            sibling_path: [
                8956528693531332551224663346512158253405203876470036151562525145332603872254,
                14271873248335483546826859233495525133684542874637762307797131009167564271404,
                16969395441223965267956801463617438551170619544519933668094428186326013452432,
                12722416459856144664961119142750367093020138265354979344147714571102471165663,
                9877578740075321285338349967107768707558172152818712161401418075364134032914,
                9462051373244237763893674566436629662815600358438718027312965399322214905738,
                5981465055244570025758375013728857801808507541381791615023562018708670499750,
                7008611329667300025930163583922313669229510724997251198196463150192376359077,
                7430092275982209248149380709910416506860531075248379624377138719573005807557,
                2539223405343873722544228890873340306288699692440681928258626679764767852271,
                11388761669303640281268750629515116538445832677239394545218414812990178691609,
                21846682940769700317251668820007414496451237708822098701178908893455710019812,
                1128828666413400385476274889803792632277402843777785901787911744596226244699,
                10137962158573734050162686176154332483946400485913588436121049706320967897922,
                20865758332970325045263219825193635787614754990818729783792516628094684528923,
                21492147508593555798954276854884538585208918386284299128827770232157281300008,
                18603683295116425944172923198605921892107095987681914655028475372448354804282,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    // All 3 proofs
    // Passport
    let passport_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 18674715260203880852824743707608376385350189999936977334562421885419294099316,
            leaf_index: 107606,
            sibling_path: [
                18675821607800233414529613648951130622711370689642617075616882486370590141673,
                2235033626648116514709760861815800515299684018920358707602913096811659895942,
                11503218394556582765667268603158706079553461947258582921270239559907522184657,
                13030783494610390476541847708326394916412493839955755269662930598445000712768,
                15871034836026949006187703017243346260695067217705632182399889870144892049303,
                17881719938579283468595484433988776387863822156642722991543771082486770304156,
                4079899484453199391213323276366517467324826887275162164291483033577124778398,
                3459892850181617151077636181855551931087241222183073870271011561201101501367,
                10986774043574033481425666483322530977362443463173647690469923373199157875970,
                19728549829450393548240267325853686359476905577241337836579012539095218112131,
                14177597732799768851299709122507163976498990272990485438928664512475005943363,
                8347558843476815548091596585852118140043037940689615423266199440381484117465,
                20927667387671448242735747635641450549102902794755877140563239741610265266958,
                12746091157216926473999609111614204306845838307854234554248792507666256553013,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 18675821607800233414529613648951130622711370689642617075616882486370590141673,
            leaf_index: 107607,
            sibling_path: [
                18674715260203880852824743707608376385350189999936977334562421885419294099316,
                2235033626648116514709760861815800515299684018920358707602913096811659895942,
                11503218394556582765667268603158706079553461947258582921270239559907522184657,
                13030783494610390476541847708326394916412493839955755269662930598445000712768,
                15871034836026949006187703017243346260695067217705632182399889870144892049303,
                17881719938579283468595484433988776387863822156642722991543771082486770304156,
                4079899484453199391213323276366517467324826887275162164291483033577124778398,
                3459892850181617151077636181855551931087241222183073870271011561201101501367,
                10986774043574033481425666483322530977362443463173647690469923373199157875970,
                19728549829450393548240267325853686359476905577241337836579012539095218112131,
                14177597732799768851299709122507163976498990272990485438928664512475005943363,
                8347558843476815548091596585852118140043037940689615423266199440381484117465,
                20927667387671448242735747635641450549102902794755877140563239741610265266958,
                12746091157216926473999609111614204306845838307854234554248792507666256553013,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let name_and_dob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 16185177732310477260084943906004223399597368428652335410368759234313937346479,
            leaf_index: 93240,
            sibling_path: [
                16185314510148275117643302100301636302726000384712949917645679395971297426357,
                15969998096259486727970746221106503882396634353779663360738924066890694913169,
                11082766424664628222077369758955803164210892199296911163471836585883269278598,
                17813109994472311877878001470304610044203842282015199989486594609335429166695,
                8189278274265321647855212227449665005655229446870508009011419190716742971487,
                10695922875605352839296242541270468896914490330728845346733325421231938823893,
                21476601499889979239297967897025575904960129232440592658050058866618993874853,
                20850677374571240808668428865667761451139579375210141128662251354608928286415,
                15758314119828963276221533040524747634978967404159609178082772017401247237335,
                492134440768523552086805495365765752251493768760477397892267641999281030241,
                3310216972027424045264550314811017154471924981957590975920096337464017806007,
                8201380046158679181142528890428883815694517254647007857539928068666171835442,
                6802730886220718584050820898159981360409386482502636663713764257068465276373,
                12578059855022539543676144144949594399778565933677368980790781104862780628541,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 16185314510148275117643302100301636302726000384712949917645679395971297426357,
            leaf_index: 93241,
            sibling_path: [
                16185177732310477260084943906004223399597368428652335410368759234313937346479,
                15969998096259486727970746221106503882396634353779663360738924066890694913169,
                11082766424664628222077369758955803164210892199296911163471836585883269278598,
                17813109994472311877878001470304610044203842282015199989486594609335429166695,
                8189278274265321647855212227449665005655229446870508009011419190716742971487,
                10695922875605352839296242541270468896914490330728845346733325421231938823893,
                21476601499889979239297967897025575904960129232440592658050058866618993874853,
                20850677374571240808668428865667761451139579375210141128662251354608928286415,
                15758314119828963276221533040524747634978967404159609178082772017401247237335,
                492134440768523552086805495365765752251493768760477397892267641999281030241,
                3310216972027424045264550314811017154471924981957590975920096337464017806007,
                8201380046158679181142528890428883815694517254647007857539928068666171835442,
                6802730886220718584050820898159981360409386482502636663713764257068465276373,
                12578059855022539543676144144949594399778565933677368980790781104862780628541,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let name_and_yob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 19730106270788425280092367798910448773697094309496274578808059063804713053408,
            leaf_index: 113756,
            sibling_path: [
                19730380503364122347072871235115769778645552502534070561422172454478574407904,
                10820564360728112435516315028388403786916144896537596478263469146568069065890,
                13967628781229888702334061924794759393232473067507231820119873388002867432937,
                11547171983170274498777018637184057325662393918693574560759730497710975136529,
                16981371809573727238307430602854183599938297336501954627775747157890021320459,
                16685493615193667553012921565332038066720258416954039429462223868809017172045,
                2608768326829173795859343391676725055915654722344035005337258160003148399344,
                3204409644017900071112307137107500860755957692935695139399148701113458728353,
                16791724150889627770744319878671770185620617686937984461965559992369089854269,
                16531195885979233337336706973613610563803902193215234473773779581528304932812,
                4681982554062442746268371612927751780207570240998728398547487276477692770196,
                11944073018674702918759392567768428248850499300987010083174595307233334497651,
                14174827611458534542691470947826270202221928681021284183242407217562967377988,
                12746091157216926473999609111614204306845838307854234554248792507666256553013,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 19730380503364122347072871235115769778645552502534070561422172454478574407904,
            leaf_index: 113757,
            sibling_path: [
                19730106270788425280092367798910448773697094309496274578808059063804713053408,
                10820564360728112435516315028388403786916144896537596478263469146568069065890,
                13967628781229888702334061924794759393232473067507231820119873388002867432937,
                11547171983170274498777018637184057325662393918693574560759730497710975136529,
                16981371809573727238307430602854183599938297336501954627775747157890021320459,
                16685493615193667553012921565332038066720258416954039429462223868809017172045,
                2608768326829173795859343391676725055915654722344035005337258160003148399344,
                3204409644017900071112307137107500860755957692935695139399148701113458728353,
                16791724150889627770744319878671770185620617686937984461965559992369089854269,
                16531195885979233337336706973613610563803902193215234473773779581528304932812,
                4681982554062442746268371612927751780207570240998728398547487276477692770196,
                11944073018674702918759392567768428248850499300987010083174595307233334497651,
                14174827611458534542691470947826270202221928681021284183242407217562967377988,
                12746091157216926473999609111614204306845838307854234554248792507666256553013,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let smt_proofs = SanctionsOrderedMerkleTreeProofs {
        // We can use the same proofs for simplicity since there's no second given names
        // they will all be the same
        name_proofs: [name_proof; 3],
        passport_no_and_nationality_proof: passport_proof,
        name_and_dob_proofs: [name_and_dob_proof; 3],
        name_and_yob_proofs: [name_and_yob_proof; 3],
    };

    trees.check_sanctions_exclusion(dg1, smt_proofs, true);
}

#[test]
fn test_non_inclusion_of_german_dg1() {
    // Provide the non inclusion proofs for an empty dg1
    // name = 'MUELLER<<JOHANNES<<<<<<<<<<<<<<<<<<<<<<',
    // dob = '860226',
    // year = '86',
    // passport no = 123456789
    // country = Germany

    let passport_no = "123456789".as_bytes();
    // The MRZ country is D<< while the standard Alpha3 code for Germany is DEU
    // The actual sanctions list will be using DEU rather than D<<, but the circuit
    // should make the conversion from D<< to DEU when the country is retrieved from the MRZ
    let country = "D<<".as_bytes();
    let name = "MUELLER<<JOHANNES<<<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dob = "860226".as_bytes();

    let dg1: [u8; 95] = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    let name_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 16847615597941925683125829487704639912742480801748637799512831103621180199493,
            leaf_index: 97036,
            sibling_path: [
                16847877387895272008133175339196796799982204440531370830285746768266245745917,
                16618282185040247415947022839351445875608127695101791937412231647277759093413,
                13134737588014743048117037437507781324922144964950305688310761913812894737278,
                15431525006228354742863033709759268287368900289837288397706614835399880640428,
                14494020608426432366225231964619224287171986986765821693973649518611513885296,
                20226918045167282623305622374527077940878950444464650793565315922652057299300,
                7733530632831393633576692684662051458485935515272941047096321814743980798563,
                19733983984591930951124543851935199263244893398124970924353438194876125061989,
                343439295147048624571381236228577761284060343992371008136009534121663298409,
                12281085839303722021391084884555770651107536142276379317408317160908681574200,
                16122779828210323967122285087375096383442950138877373425068024996443937147795,
                5774410796140190135462277518343034178690121422202964400039621535887499635983,
                11532682995332464721591054321168760736456370291062589726969412117274351427554,
                12578059855022539543676144144949594399778565933677368980790781104862780628541,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 16847877387895272008133175339196796799982204440531370830285746768266245745917,
            leaf_index: 97037,
            sibling_path: [
                16847615597941925683125829487704639912742480801748637799512831103621180199493,
                16618282185040247415947022839351445875608127695101791937412231647277759093413,
                13134737588014743048117037437507781324922144964950305688310761913812894737278,
                15431525006228354742863033709759268287368900289837288397706614835399880640428,
                14494020608426432366225231964619224287171986986765821693973649518611513885296,
                20226918045167282623305622374527077940878950444464650793565315922652057299300,
                7733530632831393633576692684662051458485935515272941047096321814743980798563,
                19733983984591930951124543851935199263244893398124970924353438194876125061989,
                343439295147048624571381236228577761284060343992371008136009534121663298409,
                12281085839303722021391084884555770651107536142276379317408317160908681574200,
                16122779828210323967122285087375096383442950138877373425068024996443937147795,
                5774410796140190135462277518343034178690121422202964400039621535887499635983,
                11532682995332464721591054321168760736456370291062589726969412117274351427554,
                12578059855022539543676144144949594399778565933677368980790781104862780628541,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    // All 3 proofs
    // Passport
    let passport_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 17678843201822127079666876969156086167683830761763581451616589513039830354873,
            leaf_index: 101887,
            sibling_path: [
                17678483488934989303041571921721254879047474800165078075593658906956492165875,
                6610364792281795014260198959345927065458104257038120310051615204099271167669,
                20143446098143373351115574789874463724657094905390422314561874459636175677217,
                19893691468203207856343450116772538422842222662683739252330869282968010313918,
                18375017133380115549264244094205886217930886888269905022300789542812260107163,
                14450361122162379605006628448487580172133080646512361981558726476851391828522,
                1036862762253276180804636314179061183024782892973299935324260643003293154167,
                8257529312784508492912180973014415084531719922924059455167680904342512386093,
                6060888110532640004278203381347877480103641295060762402570072095219522597696,
                14977465414962876498532718619232933760438657995631681123166861880137327543693,
                2007316816053259234948953164938387248614178337976946887891986282783973292522,
                9189238498999806644198756783538198389204583916899919152742951447721678962963,
                5874980421161757665977513338727910123138275087088599522758714702956879017210,
                10459664789519617235643284513680283692887508692353139451402381241604377011216,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 17679946430902534397335637626482439472280994668445251224471281429426312031564,
            leaf_index: 101888,
            sibling_path: [
                17680009225312899004641896252463515877936801739306389953968307970786015936461,
                15920555220840417433453084217433280607300456601644597478837091775042294952230,
                7077806398237497047822025689811545853856040346317451821759202659869473269398,
                16298277226147465055309164273760489230052064929859787343893458467267129893719,
                13757410589765261182276025064763576951147744505367178873000858015249421979739,
                2997983014641542063604707706941967394204727211279535759797619154898952586828,
                20849608473764511002794092391268919552069638254308513771443657052965792140954,
                6691856577513322747897518495383380663162949013281370171436464449903680140968,
                2546673929177403889858815659399078806388340658165031275163195461683629033646,
                2357390502483756418241243860731164439513252715720685645950608157983412474680,
                2007316816053259234948953164938387248614178337976946887891986282783973292522,
                9189238498999806644198756783538198389204583916899919152742951447721678962963,
                5874980421161757665977513338727910123138275087088599522758714702956879017210,
                10459664789519617235643284513680283692887508692353139451402381241604377011216,
                1704214830929787379728169738650302688713097533582311475513308253832292328493,
                15441374477832832067403020987115514648981625650532786114323990206732691056514,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let name_and_dob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 5241331124273529703806704617272911046448928534660311876970425657428036441867,
            leaf_index: 30022,
            sibling_path: [
                5241706441765909250871422924725078949625321825638467420885267645523233061819,
                21703072265898492117469380520861137676437526915431557094944601463982190210595,
                1615981054663722417318831796402477393211529854246022521283598896508385728508,
                13451001766593624105437613876595293418940850663282422368292272266755536976808,
                14646138640567109359841889270014931689085964393097814591892759723536559689046,
                20860667734631241843693703198107816485628919570815562980836677613029357992257,
                8502217453064035879400129324749471895046477885049384861525264171089230638013,
                6687921882316242026992793793550978841138455107582706619426901651306714492770,
                81549277227934170603609187009044262745979635016424642255657490228256979098,
                1001760550780152654018709844046787139255765489188778507878360442735487924042,
                1096776750586595438538549261263405801688412369215258789031509036603118680383,
                20380315093746526882160720766334768926009272345077268575350833212971247812001,
                162641664958058225784881978434194853896065925593795623997871531874239119972,
                17599418490215381828774587320556712726160757374017226077119475062219668243411,
                17370610256219177579402088811071881840699491241308318301512787431106789397928,
                6170047750834888331597810312282160751025283295819884664149158819731763951095,
                18603683295116425944172923198605921892107095987681914655028475372448354804282,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 5241706441765909250871422924725078949625321825638467420885267645523233061819,
            leaf_index: 30023,
            sibling_path: [
                5241331124273529703806704617272911046448928534660311876970425657428036441867,
                21703072265898492117469380520861137676437526915431557094944601463982190210595,
                1615981054663722417318831796402477393211529854246022521283598896508385728508,
                13451001766593624105437613876595293418940850663282422368292272266755536976808,
                14646138640567109359841889270014931689085964393097814591892759723536559689046,
                20860667734631241843693703198107816485628919570815562980836677613029357992257,
                8502217453064035879400129324749471895046477885049384861525264171089230638013,
                6687921882316242026992793793550978841138455107582706619426901651306714492770,
                81549277227934170603609187009044262745979635016424642255657490228256979098,
                1001760550780152654018709844046787139255765489188778507878360442735487924042,
                1096776750586595438538549261263405801688412369215258789031509036603118680383,
                20380315093746526882160720766334768926009272345077268575350833212971247812001,
                162641664958058225784881978434194853896065925593795623997871531874239119972,
                17599418490215381828774587320556712726160757374017226077119475062219668243411,
                17370610256219177579402088811071881840699491241308318301512787431106789397928,
                6170047750834888331597810312282160751025283295819884664149158819731763951095,
                18603683295116425944172923198605921892107095987681914655028475372448354804282,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let name_and_yob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 13520906526882975260047628088903941351233487524184204507586188205041172984379,
            leaf_index: 77929,
            sibling_path: [
                13520724679456254784797560335269264600349770909588346167124667588496439306404,
                797718405799143353850077259922215611592288022962023761693310138289546352252,
                7014114072367329884087267983560718873141824578189653859057566900071812422250,
                10045597890471946567457726460739517439922474484649978094844210048788973460019,
                1381238115210696932314335217924168486384568425585578109272655175698964504795,
                14817463039994833107692223323695608413038907052106207973709246514443918906766,
                19009430651782458899887242673079067250766844041748392897841401884276254912343,
                2184024946170549546088194096953951025240427459650062902582423845114902649619,
                15874078144158276250039638045306195339878488707346910855712425685695180131258,
                11945286372771301251153837240833928239338863336751064802422650036510352267776,
                17235652198432593515744083344410673579069928020177231615232806655514171151781,
                17485020898595449334576719123674746575072250626826463936358263448294299212713,
                4420389821990951392372110243452183070248785256373173857751894534076629590659,
                5620049624712083760202601549929403514961750617096897435736573609815674781178,
                2438829298785015674245947852972803351298670490567346671260592308558608267675,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 13521425026896420022203876767580951416401644784854387377332576981467843596093,
            leaf_index: 77930,
            sibling_path: [
                13521502695515903361244935247129799526672778354847082897029932877696748329337,
                14780672967728621196180874399857932566978644150475049623573026605969123931805,
                7014114072367329884087267983560718873141824578189653859057566900071812422250,
                10045597890471946567457726460739517439922474484649978094844210048788973460019,
                1381238115210696932314335217924168486384568425585578109272655175698964504795,
                14817463039994833107692223323695608413038907052106207973709246514443918906766,
                19009430651782458899887242673079067250766844041748392897841401884276254912343,
                2184024946170549546088194096953951025240427459650062902582423845114902649619,
                15874078144158276250039638045306195339878488707346910855712425685695180131258,
                11945286372771301251153837240833928239338863336751064802422650036510352267776,
                17235652198432593515744083344410673579069928020177231615232806655514171151781,
                17485020898595449334576719123674746575072250626826463936358263448294299212713,
                4420389821990951392372110243452183070248785256373173857751894534076629590659,
                5620049624712083760202601549929403514961750617096897435736573609815674781178,
                2438829298785015674245947852972803351298670490567346671260592308558608267675,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let smt_proofs = SanctionsOrderedMerkleTreeProofs {
        // We can use the same proofs for simplicity since there's no second given names
        // they will all be the same
        name_proofs: [name_proof; 3],
        passport_no_and_nationality_proof: passport_proof,
        name_and_dob_proofs: [name_and_dob_proof; 3],
        name_and_yob_proofs: [name_and_yob_proof; 3],
    };

    trees.check_sanctions_exclusion(dg1, smt_proofs, true);
}

#[test]
fn test_non_inclusion_multiple_proofs_dg1() {
    // Provide the non inclusion proofs for an empty dg1
    // name = "DUPONT<<JEAN<PIERRE<MARTIN<<<<<<<<<<<<<<"
    // dob = "950503"
    // yob = "95"
    // passport no = 123456789
    // country = France

    let passport_no = "123456789".as_bytes();
    let country = "FRA".as_bytes();
    let name = "DUPONT<<JEAN<PIERRE<MARTIN<<<<<<<<<<<<<".as_bytes();
    let dob = "950503".as_bytes();
    let yob = "95".as_bytes();

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    let name_proofs: [SanctionsOrderedMerkleTreeProof; 3] = [
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 20327218013468532024977703950282715959777362185486115166984429854983515085645,
                leaf_index: 117136,
                sibling_path: [
                    20327353104938380031392079811300136451742442503346524535992692328025808771645,
                    4639484491236171540670867719688175726369689852604961886615432662678753130819,
                    10167376921081863728789071571068418609224044293223490549128836736581536852584,
                    11910827271331840149700275773681247619566724466272779829364849280989222478507,
                    9893010563575510024694821663437272535753104864977071056894487800546898165250,
                    5105161357516357905871979429723439717007643213393710157793450794195925977243,
                    9217605631718175140900994976433031365798149555437366863781308805853425764370,
                    14085398265900394166553078778143091840504970044957039860311740337826954239480,
                    3169665388558243606702720782126564279813359808305958248440597540322738782503,
                    8892684889248569226969811772283705563457938285246977803572576859824089489299,
                    7362929848443600538844187195609534054061106293777541126928356999771970696150,
                    758422098658481530518976765277817087942998421165812113580642086476642992877,
                    3487690099168310036032580363536168717127143417513461932987916196052832701217,
                    291678425402112164069752548427887433215434941423193015687330007865709200008,
                    18771710733672886238788891027288081988634629850888826537841266523525100204071,
                    15441374477832832067403020987115514648981625650532786114323990206732691056514,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 20327353104938380031392079811300136451742442503346524535992692328025808771645,
                leaf_index: 117137,
                sibling_path: [
                    20327218013468532024977703950282715959777362185486115166984429854983515085645,
                    4639484491236171540670867719688175726369689852604961886615432662678753130819,
                    10167376921081863728789071571068418609224044293223490549128836736581536852584,
                    11910827271331840149700275773681247619566724466272779829364849280989222478507,
                    9893010563575510024694821663437272535753104864977071056894487800546898165250,
                    5105161357516357905871979429723439717007643213393710157793450794195925977243,
                    9217605631718175140900994976433031365798149555437366863781308805853425764370,
                    14085398265900394166553078778143091840504970044957039860311740337826954239480,
                    3169665388558243606702720782126564279813359808305958248440597540322738782503,
                    8892684889248569226969811772283705563457938285246977803572576859824089489299,
                    7362929848443600538844187195609534054061106293777541126928356999771970696150,
                    758422098658481530518976765277817087942998421165812113580642086476642992877,
                    3487690099168310036032580363536168717127143417513461932987916196052832701217,
                    291678425402112164069752548427887433215434941423193015687330007865709200008,
                    18771710733672886238788891027288081988634629850888826537841266523525100204071,
                    15441374477832832067403020987115514648981625650532786114323990206732691056514,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 10796779367874717145198884969083712292825230531883210103969248762317418887836,
                leaf_index: 62236,
                sibling_path: [
                    10796885077011277592433471009955726471285905503359594096659682372770329646578,
                    19218871525840361633589655458786171441209272920792038951317329205533286946210,
                    15255362787218586789392445278723272978178021535592110584410676731001725330585,
                    8602937166559218711601183301876040582745069761474800063999460937093597211591,
                    1797857945127024432926157475623919454918115270730455326167152023467689045403,
                    20087428750971403272950161433556017137240245079323888862204077386141567160398,
                    8667672647328953352753969173788367820790895833954244968267791795748544652617,
                    11114704540922380767356815267918902305848488849024258507902581216812600081555,
                    14512043249042500971837426050589236846761811248735222778016037990345888644525,
                    8919551372760770366542711658964782200628806176722063968063126470777440259263,
                    16842442809437470580980776072939398930054471665955456080703474788475394917102,
                    4448176747649358561163657437341213478352261684070723268605549378552830443063,
                    21119481045123726042168736323731754937688740500118175188253859590896690081016,
                    15229846499070057919568028228498400083321377286308239754668065880580802292027,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 10796885077011277592433471009955726471285905503359594096659682372770329646578,
                leaf_index: 62237,
                sibling_path: [
                    10796779367874717145198884969083712292825230531883210103969248762317418887836,
                    19218871525840361633589655458786171441209272920792038951317329205533286946210,
                    15255362787218586789392445278723272978178021535592110584410676731001725330585,
                    8602937166559218711601183301876040582745069761474800063999460937093597211591,
                    1797857945127024432926157475623919454918115270730455326167152023467689045403,
                    20087428750971403272950161433556017137240245079323888862204077386141567160398,
                    8667672647328953352753969173788367820790895833954244968267791795748544652617,
                    11114704540922380767356815267918902305848488849024258507902581216812600081555,
                    14512043249042500971837426050589236846761811248735222778016037990345888644525,
                    8919551372760770366542711658964782200628806176722063968063126470777440259263,
                    16842442809437470580980776072939398930054471665955456080703474788475394917102,
                    4448176747649358561163657437341213478352261684070723268605549378552830443063,
                    21119481045123726042168736323731754937688740500118175188253859590896690081016,
                    15229846499070057919568028228498400083321377286308239754668065880580802292027,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 12902791041232569037459298781062395175779389534500257602184965979829022198823,
                leaf_index: 74346,
                sibling_path: [
                    12903553094114128398424079474117405465619286824945436077224609984705551789158,
                    7188397325320229950482493936026377372345933374524879063396352994410143379814,
                    5144527039003596898852067874329821776138449886290767356941076979639991895063,
                    16460836515114993576244988775868257649950788360643546692878866890821559029420,
                    21013043122646471674111887119944413840640859122280681489293126815978693364674,
                    9186407971609273637826785803346813483752182949426183363115438237443311264953,
                    5000557470441067634539756693162749698064971880833818760755732207792514194204,
                    3313292058818810071409270160101319917777638336713986290640138293884648480438,
                    21026751061690345902955436059780496473007573504831433593299153126593474246568,
                    3023507943409907033360662275438023404102369175547946413320987218090859664360,
                    7349153054468478502250529793632805229825419739059364707038991873559452939138,
                    4586532691500200935443995105060951968316459924090747360910683030839894319331,
                    7967335965763859153829557973485454051503215933945722387441475192634436758975,
                    5620049624712083760202601549929403514961750617096897435736573609815674781178,
                    2438829298785015674245947852972803351298670490567346671260592308558608267675,
                    19463981340307350320021110048161204669953124625441990552839847617090045440793,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 12903553094114128398424079474117405465619286824945436077224609984705551789158,
                leaf_index: 74347,
                sibling_path: [
                    12902791041232569037459298781062395175779389534500257602184965979829022198823,
                    7188397325320229950482493936026377372345933374524879063396352994410143379814,
                    5144527039003596898852067874329821776138449886290767356941076979639991895063,
                    16460836515114993576244988775868257649950788360643546692878866890821559029420,
                    21013043122646471674111887119944413840640859122280681489293126815978693364674,
                    9186407971609273637826785803346813483752182949426183363115438237443311264953,
                    5000557470441067634539756693162749698064971880833818760755732207792514194204,
                    3313292058818810071409270160101319917777638336713986290640138293884648480438,
                    21026751061690345902955436059780496473007573504831433593299153126593474246568,
                    3023507943409907033360662275438023404102369175547946413320987218090859664360,
                    7349153054468478502250529793632805229825419739059364707038991873559452939138,
                    4586532691500200935443995105060951968316459924090747360910683030839894319331,
                    7967335965763859153829557973485454051503215933945722387441475192634436758975,
                    5620049624712083760202601549929403514961750617096897435736573609815674781178,
                    2438829298785015674245947852972803351298670490567346671260592308558608267675,
                    19463981340307350320021110048161204669953124625441990552839847617090045440793,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
    ];

    let passport_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 14924295939097279033094301210410590481337482974296739450146111607612890914101,
            leaf_index: 85956,
            sibling_path: [
                14924752132163278143980416328677302726191117725995700963337458003444494773409,
                12529396875138522676112961300464059852656554908838568049088872325845596681591,
                15150953303451309603085589562205570648892315091291705896742707277150878964460,
                14699554417398883006822504044695069703106705089721546417786293545422815704418,
                15859748462913720210441661188941125426124309134050580735920144534321768309545,
                11852441015766485652291258043436633913587724276831586223171864764061648780507,
                15360485060885086151482674553222374861297231718638362280586847695889215602531,
                5476589575495668435175426096372109210544360862444461763361389529503336933357,
                20933755209825709027307389322195252238526802581540515162805450466533346192673,
                5243435937072394327775434761746981375094100465023588094055635840364829315295,
                9523837503276646984549265232091638067018195573552414099062800558097694782991,
                5316782064862425889746504618434427105004127090176143454061000146053125324557,
                4943529769135984050953904389896827323356776014532028635880992813567736204845,
                8221172115276069499012192136780618982358248834903009411213739229177391130061,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 14924752132163278143980416328677302726191117725995700963337458003444494773409,
            leaf_index: 85957,
            sibling_path: [
                14924295939097279033094301210410590481337482974296739450146111607612890914101,
                12529396875138522676112961300464059852656554908838568049088872325845596681591,
                15150953303451309603085589562205570648892315091291705896742707277150878964460,
                14699554417398883006822504044695069703106705089721546417786293545422815704418,
                15859748462913720210441661188941125426124309134050580735920144534321768309545,
                11852441015766485652291258043436633913587724276831586223171864764061648780507,
                15360485060885086151482674553222374861297231718638362280586847695889215602531,
                5476589575495668435175426096372109210544360862444461763361389529503336933357,
                20933755209825709027307389322195252238526802581540515162805450466533346192673,
                5243435937072394327775434761746981375094100465023588094055635840364829315295,
                9523837503276646984549265232091638067018195573552414099062800558097694782991,
                5316782064862425889746504618434427105004127090176143454061000146053125324557,
                4943529769135984050953904389896827323356776014532028635880992813567736204845,
                8221172115276069499012192136780618982358248834903009411213739229177391130061,
                12469661751121015863831637497066272123987407425322165788816166548395052973197,
                19463981340307350320021110048161204669953124625441990552839847617090045440793,
                48965690409285468029915012961748482331618424664620953811067367018650070817,
                3218243980816964110015535469652973420290887819006413761652914020854170460131,
            ],
        },
    };

    let name_and_dob_proofs: [SanctionsOrderedMerkleTreeProof; 3] = [
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 14496944161520644234037793071488582690891856807078276475465943635353426184291,
                leaf_index: 83548,
                sibling_path: [
                    14497219488263744144396987639352214332241569658892941887954621125998578153156,
                    13269526007976449356347383251990153694443785775740963495247687056882466796120,
                    3412376340373910533806146314686552298574081775476652295091542460389097685872,
                    14741154360689020793321800714118312816528061770356323846570235657120451833571,
                    21485038687006384068625754717163592171785070093839895696497373005188565837234,
                    2154151209983747515897443159741709166060266339759910728205876264067206226352,
                    6299324144072553805783845202704403093037172038554592643622514152455086851321,
                    7824377484056747077972794820976144684132813184286165308657630452469531057525,
                    2164024373580791470506729593366002001244951967224339989686185972101012411454,
                    17110463670219090061965775432011509700166510304953815340523117292966858861341,
                    20339695774464733812399992866706796946358922867623326946505747310492025059348,
                    21500676076633864323576009437555009912923292116672312133737960035079136827497,
                    4943529769135984050953904389896827323356776014532028635880992813567736204845,
                    8221172115276069499012192136780618982358248834903009411213739229177391130061,
                    12469661751121015863831637497066272123987407425322165788816166548395052973197,
                    19463981340307350320021110048161204669953124625441990552839847617090045440793,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 14497219488263744144396987639352214332241569658892941887954621125998578153156,
                leaf_index: 83549,
                sibling_path: [
                    14496944161520644234037793071488582690891856807078276475465943635353426184291,
                    13269526007976449356347383251990153694443785775740963495247687056882466796120,
                    3412376340373910533806146314686552298574081775476652295091542460389097685872,
                    14741154360689020793321800714118312816528061770356323846570235657120451833571,
                    21485038687006384068625754717163592171785070093839895696497373005188565837234,
                    2154151209983747515897443159741709166060266339759910728205876264067206226352,
                    6299324144072553805783845202704403093037172038554592643622514152455086851321,
                    7824377484056747077972794820976144684132813184286165308657630452469531057525,
                    2164024373580791470506729593366002001244951967224339989686185972101012411454,
                    17110463670219090061965775432011509700166510304953815340523117292966858861341,
                    20339695774464733812399992866706796946358922867623326946505747310492025059348,
                    21500676076633864323576009437555009912923292116672312133737960035079136827497,
                    4943529769135984050953904389896827323356776014532028635880992813567736204845,
                    8221172115276069499012192136780618982358248834903009411213739229177391130061,
                    12469661751121015863831637497066272123987407425322165788816166548395052973197,
                    19463981340307350320021110048161204669953124625441990552839847617090045440793,
                    48965690409285468029915012961748482331618424664620953811067367018650070817,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 3101426897175315770390940561624743237241488951040024733314137286616527082221,
                leaf_index: 17761,
                sibling_path: [
                    3101276493070459618462479690085102845771266882583125747997495900823266693970,
                    4128078582212524855327961144053451304940479165928780959963331911808087450182,
                    3745195672327243476717973770032642740412318531350944186232159036037330562080,
                    6322739777106228102383442870075095436108007995722417475783147185724735987785,
                    1683533638126945227924914601873962560978014845536358948991605016878059730993,
                    13613000636729234276713419355398807075003604476488680090555615149995332367276,
                    15779526894061463371772745328683438302502121773435418471444855413115500593526,
                    4921114923417538156949681050779345995327452723203598832446053557331008354124,
                    3905696997529531712837421293587058166222296283105126138204983034425237445715,
                    795584718140490673577817671148775107335479271643379357743450045205102149227,
                    18049226769091040930096230192585953299081763884504014721374013971465088682235,
                    5434442035449619277432648871508921509504783258985049628765142887231393714861,
                    20557978241977916150976836518733445847681514724521482262306855508998273823824,
                    18318100523842718406511023040718804871361319366814245612256742425274617756237,
                    17370610256219177579402088811071881840699491241308318301512787431106789397928,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 3101629002498337261311984708564941036969404067677353787527035902183354318313,
                leaf_index: 17762,
                sibling_path: [
                    3101704788896947643180990423150868550059604604207777560875262621426123890691,
                    5564225932238446909636070598880998933631298057558755919287434221332116394053,
                    3745195672327243476717973770032642740412318531350944186232159036037330562080,
                    6322739777106228102383442870075095436108007995722417475783147185724735987785,
                    1683533638126945227924914601873962560978014845536358948991605016878059730993,
                    13613000636729234276713419355398807075003604476488680090555615149995332367276,
                    15779526894061463371772745328683438302502121773435418471444855413115500593526,
                    4921114923417538156949681050779345995327452723203598832446053557331008354124,
                    3905696997529531712837421293587058166222296283105126138204983034425237445715,
                    795584718140490673577817671148775107335479271643379357743450045205102149227,
                    18049226769091040930096230192585953299081763884504014721374013971465088682235,
                    5434442035449619277432648871508921509504783258985049628765142887231393714861,
                    20557978241977916150976836518733445847681514724521482262306855508998273823824,
                    18318100523842718406511023040718804871361319366814245612256742425274617756237,
                    17370610256219177579402088811071881840699491241308318301512787431106789397928,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 9637591405885698542324570175737244426748797830625376360680158565698628763026,
                leaf_index: 55487,
                sibling_path: [
                    9637488395592708953032381298927810951758613835191071676088335564276982242063,
                    1631737865603560886285190343917249468789757632415757418799776247127345635669,
                    7488244078160849363444115575607172369361887298971040260587277770055432250470,
                    4947249086542034035034432103272399460825629422827138382569538711703176923629,
                    8095937685063226709452378666656906817804215448013780667132932036076554549186,
                    15999847720549154019940800750467488827407081461918850463568782627831782284711,
                    15310064230543459707281190515030471878300767152228971939643743015304906599726,
                    4291875262093688125292269522235251804106779860092562845894382819036685953066,
                    17388179987399526235200068878796984783405115048292992269933620341130606501565,
                    21274156048434619622853437503021203638559708304982859474997055835140429077594,
                    734380435999513096446682962507380279615876534107902790033958289444916460870,
                    14058483685472431627034796845617326784026902534036835598958196290194680760975,
                    1913885167271226048900869664928774533906534828591045315003513706548389395567,
                    10137962158573734050162686176154332483946400485913588436121049706320967897922,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 9637894886663432935206420621867789362576676329386461829825949631361813078869,
                leaf_index: 55488,
                sibling_path: [
                    9637934745308643254966932931276146855168625917993921245924667658765889968336,
                    5314412546390767024091153710376041073896416249322008263169472331807416405896,
                    18157360196222784481329613094399172081050138459667516559394369666563733924878,
                    6960550622803621720372884593088671215949455235963449034229603051016624238971,
                    2124363975656782575687640963656478674724702500954662847510976172590755046817,
                    4361632813304271719853293395007621886311006153330449592077708696106385271339,
                    9121439580035443369829546849192471224511335281566178167363559688959617735821,
                    4291875262093688125292269522235251804106779860092562845894382819036685953066,
                    17388179987399526235200068878796984783405115048292992269933620341130606501565,
                    21274156048434619622853437503021203638559708304982859474997055835140429077594,
                    734380435999513096446682962507380279615876534107902790033958289444916460870,
                    14058483685472431627034796845617326784026902534036835598958196290194680760975,
                    1913885167271226048900869664928774533906534828591045315003513706548389395567,
                    10137962158573734050162686176154332483946400485913588436121049706320967897922,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
    ];

    let name_and_yob_proofs: [SanctionsOrderedMerkleTreeProof; 3] = [
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 338711472277627281111914598666280410674746959882638181608529558488869384080,
                leaf_index: 2006,
                sibling_path: [
                    339275877086617205794938209907078286473737013648888907086584258834212877638,
                    8900225651408102326769582251239825023302351810658982092865942220653441839636,
                    7919190437842231956052276989691564220111623529158510444190567652294797164163,
                    363438342973399000398766774967290329679710112187634743627321836386842907964,
                    10362035609311519715449464423349078198894200985041300498029839659679774996306,
                    5304202884705754435221802208668632261382610908820422999539700331461091365853,
                    8779206086421792157138273897919605412475478255725822956014965296260109509509,
                    7628781236183512366517270177728642633836106790606936564081994360319474085733,
                    7503773441011981352696971754717216749579926559259091043625495081063007980143,
                    16336496705414934697032069383167279444794085808526493345372759748599086431040,
                    18722398897746215811609806761067625654072673629110107440275557336700927855442,
                    18820138521757667575505291311223932864682153951596251749778606261768461287703,
                    13266561301471257258539044592892442240556507457562242352281174682693065357580,
                    9295065156886282224341478908698448565384819123602296403920973906630830832025,
                    5019181415106207781408050313923556940335758386868045756608045713679758661105,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 339275877086617205794938209907078286473737013648888907086584258834212877638,
                leaf_index: 2007,
                sibling_path: [
                    338711472277627281111914598666280410674746959882638181608529558488869384080,
                    8900225651408102326769582251239825023302351810658982092865942220653441839636,
                    7919190437842231956052276989691564220111623529158510444190567652294797164163,
                    363438342973399000398766774967290329679710112187634743627321836386842907964,
                    10362035609311519715449464423349078198894200985041300498029839659679774996306,
                    5304202884705754435221802208668632261382610908820422999539700331461091365853,
                    8779206086421792157138273897919605412475478255725822956014965296260109509509,
                    7628781236183512366517270177728642633836106790606936564081994360319474085733,
                    7503773441011981352696971754717216749579926559259091043625495081063007980143,
                    16336496705414934697032069383167279444794085808526493345372759748599086431040,
                    18722398897746215811609806761067625654072673629110107440275557336700927855442,
                    18820138521757667575505291311223932864682153951596251749778606261768461287703,
                    13266561301471257258539044592892442240556507457562242352281174682693065357580,
                    9295065156886282224341478908698448565384819123602296403920973906630830832025,
                    5019181415106207781408050313923556940335758386868045756608045713679758661105,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 4451583938302882180259991267736505022636140449377801507993668566787638271256,
                leaf_index: 25495,
                sibling_path: [
                    4451505834902062836949882825469504922444677865792445309724730067939840272991,
                    13455150106446383706148463155059505676379140472671224632029339152715461976875,
                    3466565512124512936072297171739218149862967547301173309617566363566243635925,
                    5981634514943850468589804201862008431124670792962507458741025879218288862120,
                    16550470310841694803712366145847367615256368607397422161979783527593555695236,
                    17789328072798309676192535705642470649812946477628560150371883389631255221205,
                    11745309518379589189955781617222351178438796599832003922886509830214893358749,
                    20082562697069520926719094265030509321975859245592209521457434048622923175934,
                    19581454165131596280462102095053263964991732377303654487538120136888859023142,
                    8959674358278800317289304633033253338502966948008736923559173119315700419625,
                    13762282362432231415038214545158410679713311574205011080714194733677217000517,
                    18495445123029745176727919096262306510395126599857446602064438269684181597901,
                    1979760089518279234242913413049889186019002812499263123925554561536072179811,
                    17599418490215381828774587320556712726160757374017226077119475062219668243411,
                    17370610256219177579402088811071881840699491241308318301512787431106789397928,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 4451684424993846785490951692366566192275595865324358779767207121674737216641,
                leaf_index: 25496,
                sibling_path: [
                    4451943041793725028287982117707328727660670240947020241530830316603999293312,
                    17528369348452678280128847485057755285333420709229806359166416451310262600216,
                    4473388927705888539370157932818499675739396651991786356584841449049626081670,
                    7188489175616322998477959275388234948780167962708266896967113171140757722666,
                    16550470310841694803712366145847367615256368607397422161979783527593555695236,
                    17789328072798309676192535705642470649812946477628560150371883389631255221205,
                    11745309518379589189955781617222351178438796599832003922886509830214893358749,
                    20082562697069520926719094265030509321975859245592209521457434048622923175934,
                    19581454165131596280462102095053263964991732377303654487538120136888859023142,
                    8959674358278800317289304633033253338502966948008736923559173119315700419625,
                    13762282362432231415038214545158410679713311574205011080714194733677217000517,
                    18495445123029745176727919096262306510395126599857446602064438269684181597901,
                    1979760089518279234242913413049889186019002812499263123925554561536072179811,
                    17599418490215381828774587320556712726160757374017226077119475062219668243411,
                    17370610256219177579402088811071881840699491241308318301512787431106789397928,
                    6170047750834888331597810312282160751025283295819884664149158819731763951095,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
        SanctionsOrderedMerkleTreeProof {
            left: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 10457329827845584317814593090586213489300723969151911691862708579372739005699,
                leaf_index: 60261,
                sibling_path: [
                    10457305932631033332547587350659965793863568054133620369421266306294646074171,
                    14226632469073351945798649173396123942560216505494843745196072740878984776751,
                    9956151113426650292056905481278983797087365160665946916040950305199733476045,
                    147856465180612984414541402647561832273827260926977459494922263325838518397,
                    21076328478487550478821898943014963613112127674342386929530637619625219571944,
                    2546846158678820412191742333817628886374070578786449669101278491284884024815,
                    18254627155837136335849566762243484261594496906153459803995073682242465100972,
                    3482120709777738171408496024797016552717451627987039235757717821937738168092,
                    13804010922264901083389666358389475494265570929132508012667380409712056460821,
                    13183844717349412363661645068748309813822169315410991171478558692288550699599,
                    1473987098142567837841469563274255667153288743378680507510694687509124661655,
                    15247361085169397200231969516442714062775811298965655974795564154342682350751,
                    2453279774085756939534350644115079040696166272926353857491903064612699272892,
                    15229846499070057919568028228498400083321377286308239754668065880580802292027,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
            right: SanctionsOrderedMerkleTreeInclusionProof {
                leaf: 10457593250654388471759960801194674298369146243735494459666002569824994594314,
                leaf_index: 60262,
                sibling_path: [
                    10457714895633890989946820710088529047267779429774469058748587234327187460371,
                    20795326988810988212663848830812929889022113329008598240389475303855368949514,
                    9956151113426650292056905481278983797087365160665946916040950305199733476045,
                    147856465180612984414541402647561832273827260926977459494922263325838518397,
                    21076328478487550478821898943014963613112127674342386929530637619625219571944,
                    2546846158678820412191742333817628886374070578786449669101278491284884024815,
                    18254627155837136335849566762243484261594496906153459803995073682242465100972,
                    3482120709777738171408496024797016552717451627987039235757717821937738168092,
                    13804010922264901083389666358389475494265570929132508012667380409712056460821,
                    13183844717349412363661645068748309813822169315410991171478558692288550699599,
                    1473987098142567837841469563274255667153288743378680507510694687509124661655,
                    15247361085169397200231969516442714062775811298965655974795564154342682350751,
                    2453279774085756939534350644115079040696166272926353857491903064612699272892,
                    15229846499070057919568028228498400083321377286308239754668065880580802292027,
                    20865758332970325045263219825193635787614754990818729783792516628094684528923,
                    21492147508593555798954276854884538585208918386284299128827770232157281300008,
                    18603683295116425944172923198605921892107095987681914655028475372448354804282,
                    3218243980816964110015535469652973420290887819006413761652914020854170460131,
                ],
            },
        },
    ];

    let smt_proofs = SanctionsOrderedMerkleTreeProofs {
        name_proofs: name_proofs,
        passport_no_and_nationality_proof: passport_proof,
        name_and_dob_proofs: name_and_dob_proofs,
        name_and_yob_proofs: name_and_yob_proofs,
    };

    trees.check_sanctions_exclusion(dg1, smt_proofs, true);
}

#[test]
fn test_of_sanctioned_person() {
    // Provide the non inclusion proofs for an empty dg1
    // name = 'DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<',
    // dob = '800416',
    // yob = '80',
    // passport no = 123456789
    // country = Germany

    let passport_no = "123456789".as_bytes();
    let country = "D<<".as_bytes();
    let name = "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dob = "800416".as_bytes();

    let dg1: [u8; 95] = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    // Calculate the hashes
    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);

    assert_eq(name_1, "DAVIS<<MICHAEL<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_2, "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_3, "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes());

    let name_hash_1: Field = Poseidon2::hash(u8_array_to_fields(name_1), PASSPORT_MRZ_NAME_LENGTH);
    let name_hash_2: Field = Poseidon2::hash(u8_array_to_fields(name_2), PASSPORT_MRZ_NAME_LENGTH);
    let name_hash_3: Field = Poseidon2::hash(u8_array_to_fields(name_3), PASSPORT_MRZ_NAME_LENGTH);

    let name_inclusion_proof = SanctionsOrderedMerkleTreeInclusionProof {
        // The expected sanctioned person is named Michael Davis and this hash is over that name as John is ignored in name_1
        leaf: name_hash_1,
        leaf_index: 57070,
        sibling_path: [
            9917525085591752581815867813532608282359240187823645181665529410618628728607,
            11024720902279861419707121301282248041705611189334295156511954285840747507681,
            6093210581771637141817501526156021647071588678207749129795154601225450335984,
            21557156977843397563230019795454032336154610869060080115810964630067739381775,
            525152197508306438415845891017264353252280392817907875036646549756386798490,
            17027532763028032045609667908146807398933878510250484298013381664050338886380,
            4258851587840297575757919362131042591997712692864410864843044615548236976087,
            20058026658998762090878767264285225929110573584189252232088241492168476779018,
            12007708726336644823628535739563288646877732292094648407738365038341516155609,
            12334012466530044503708088029127195535605883656264922297607521473999562737133,
            19582666126365533658143192136117783018968407759197979471139451711186714817796,
            14058483685472431627034796845617326784026902534036835598958196290194680760975,
            1913885167271226048900869664928774533906534828591045315003513706548389395567,
            10137962158573734050162686176154332483946400485913588436121049706320967897922,
            20865758332970325045263219825193635787614754990818729783792516628094684528923,
            21492147508593555798954276854884538585208918386284299128827770232157281300008,
            18603683295116425944172923198605921892107095987681914655028475372448354804282,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };

    ordered_mt_verify_inclusion(trees.root(), name_inclusion_proof);
}

#[test(should_fail)]
fn test_of_sanctioned_person_with_wrong_name_combination() {
    // Provide the non inclusion proofs for an empty dg1
    // name = 'DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<',
    // dob = '800416',
    // yob = '80',
    // passport no = 123456789
    // country = Germany

    let passport_no = "123456789".as_bytes();
    let country = "D<<".as_bytes();
    let name = "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes();

    let dob = "800416".as_bytes();

    let dg1: [u8; 95] = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_nationality(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    // Calculate the hashes
    let (name_1, name_2, name_3) = get_last_name_and_first_name_from_mrz(dg1);

    assert_eq(name_1, "DAVIS<<MICHAEL<<<<<<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_2, "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes());
    assert_eq(name_3, "DAVIS<<MICHAEL<JOHN<<<<<<<<<<<<<<<<<<<<".as_bytes());

    let name_hash_1: Field = Poseidon2::hash(u8_array_to_fields(name_1), PASSPORT_MRZ_NAME_LENGTH);
    let name_hash_2: Field = Poseidon2::hash(u8_array_to_fields(name_2), PASSPORT_MRZ_NAME_LENGTH);
    let name_hash_3: Field = Poseidon2::hash(u8_array_to_fields(name_3), PASSPORT_MRZ_NAME_LENGTH);

    let name_inclusion_proof = SanctionsOrderedMerkleTreeInclusionProof {
        // The expected sanctioned person is named Michael Davis but this hash is over Michael John Davis (wrong name combination)
        leaf: name_hash_2,
        leaf_index: 57070,
        sibling_path: [
            9917525085591752581815867813532608282359240187823645181665529410618628728607,
            11024720902279861419707121301282248041705611189334295156511954285840747507681,
            6093210581771637141817501526156021647071588678207749129795154601225450335984,
            21557156977843397563230019795454032336154610869060080115810964630067739381775,
            525152197508306438415845891017264353252280392817907875036646549756386798490,
            17027532763028032045609667908146807398933878510250484298013381664050338886380,
            4258851587840297575757919362131042591997712692864410864843044615548236976087,
            20058026658998762090878767264285225929110573584189252232088241492168476779018,
            12007708726336644823628535739563288646877732292094648407738365038341516155609,
            12334012466530044503708088029127195535605883656264922297607521473999562737133,
            19582666126365533658143192136117783018968407759197979471139451711186714817796,
            14058483685472431627034796845617326784026902534036835598958196290194680760975,
            1913885167271226048900869664928774533906534828591045315003513706548389395567,
            10137962158573734050162686176154332483946400485913588436121049706320967897922,
            20865758332970325045263219825193635787614754990818729783792516628094684528923,
            21492147508593555798954276854884538585208918386284299128827770232157281300008,
            18603683295116425944172923198605921892107095987681914655028475372448354804282,
            3218243980816964110015535469652973420290887819006413761652914020854170460131,
        ],
    };

    ordered_mt_verify_inclusion(trees.root(), name_inclusion_proof);
}
