pub mod ordered_mt;
pub mod types;
pub mod param_commit;

use crate::ordered_mt::ordered_mt_non_membership;
use std::hash::poseidon2::Poseidon2;
use utils::test::DG1Builder;

use types::{
    SanctionsOrderedMerkleTreeInclusionProof, SanctionsOrderedMerkleTreeProof,
    SanctionsOrderedMerkleTreeProofs,
};

use utils::{
    array_concat_as_field,
    get_dob_from_mrz,
    get_document_number_from_mrz,
    get_name_from_mrz,
    get_nationality_from_mrz,
    get_yob_from_mrz,
    types::{DG1Data, MRZDOB, MRZDocumentNumber, MRZName, MRZNationality, MRZYOB},
};

global TREE_ROOT: Field = 0x0bb47c10011708980491486b3b30ac8bbd1f84465d35739a23d4c7cac5c070ef;

/// The Sanctions sparse merkle trees
/// This is a collection of the three trees that are used to check the Sanctions exclusion
/// for passports and ID cards
///
/// The trees are:
/// 1. Passport No and Nationality
/// 2. Name and DOB
/// 3. Name and YOB
pub struct SanctionsSparseMerkleTrees {
    pub tree: Field,
}

impl SanctionsSparseMerkleTrees {
    /**
     * Note: default currently using the values created in our testing implementation
     */
    pub fn default() -> Self {
        Self { tree: TREE_ROOT }
    }

    pub fn root(self: Self) -> Field {
        self.tree
    }
}

impl SanctionsSparseMerkleTrees {
    /// Check the Sanctions exclusion for a given DG1
    ///
    /// # Arguments
    ///
    /// * `dg1` - The DG1 of the passport or ID card
    /// * `proofs` - The proofs for the Sanctions sparse merkle trees
    pub fn check_sanctions_exclusion(
        self: Self,
        dg1: DG1Data,
        proofs: SanctionsOrderedMerkleTreeProofs,
    ) {
        // Calculate the hashes
        let name: MRZName = get_name_from_mrz(dg1);
        let dob: MRZDOB = get_dob_from_mrz(dg1);
        let yob: MRZYOB = get_yob_from_mrz(dg1);
        let document_number: MRZDocumentNumber = get_document_number_from_mrz(dg1);
        let nationality: MRZNationality = get_nationality_from_mrz(dg1);

        let passportNoAndNationality = array_concat_as_field(document_number, nationality);
        let passportNoAndNationalityHash: Field =
            Poseidon2::hash(passportNoAndNationality, passportNoAndNationality.len());

        let nameAndDob = array_concat_as_field(name, dob);
        let nameAndDobHash: Field = Poseidon2::hash(nameAndDob, nameAndDob.len());

        let nameAndYob = array_concat_as_field(name, yob);
        let nameAndYobHash: Field = Poseidon2::hash(nameAndYob, nameAndYob.len());

        ordered_mt_non_membership(
            self.tree,
            passportNoAndNationalityHash,
            proofs.passport_no_and_nationality_proof,
        );
        ordered_mt_non_membership(self.tree, nameAndDobHash, proofs.name_and_dob_proof);
        ordered_mt_non_membership(self.tree, nameAndYobHash, proofs.name_and_yob_proof);
    }
}

#[test]
fn non_inclusion_of_dg1() {
    // Provide the non inclusion proofs for an empty dg1
    // name = 'Doe<<John<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<',
    // dob = '900112',
    // year = '90',
    // passport no = 123456789
    // country = United Kingdom

    let passport_no = [49, 50, 51, 52, 53, 54, 55, 56, 57];
    let country = [71, 66, 82];
    let name = [
        68, 111, 101, 60, 60, 74, 111, 104, 110, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
        60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
    ];

    let dob = [57, 48, 48, 49, 49, 50];

    let dg1 = DG1Builder::new([0; 95])
        .with_document_number(passport_no)
        .with_country_code(country)
        .with_name(name)
        .with_dob(dob)
        .build();

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    // All 3 proofs
    // Passport
    let passport_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 18674386456615172342841733396108603959611017967778897078549388798634214809915,
            leaf_index: 11429,
            sibling_path: [
                18672383166126913033878540322446154556192468935270055952805510399331527023885,
                19106267598639398815985994953885200342616570880602473747888898982371713078951,
                7174734448174470445226875325904717435628708934508978488999432599849888015542,
                7846795204843568814288661432119656524539043540050980016835045736906538090190,
                3633152279003147477737891447431142406055639114369894472815669702826539942794,
                12060100452569730018676818350994788273799633472179825937105066932552091111008,
                11886359876661963996326647657502181160934791941250663293436029652134363508123,
                3058715974186430819228538964457943906883525645518925008136258294937348473020,
                8995427122687175792691637371963876615055844584426115707219030393188530554779,
                462498122045497054837233523307623880793278668859455882350467967719317974006,
                18174130755370184480667635274314560176388366186932639764574894878927666501961,
                20490244073427964508972221844929143888510039242203367182350005760858192677588,
                21845506348623550894669096933324824409051056234540494608233257318747134962249,
                14973589947186467156486530254504672967302346450794053484874079345854218144322,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 18685769843055597499770478244511153080171577100184040638075341991887898947043,
            leaf_index: 11430,
            sibling_path: [
                18687150828784244448072619685136827974599701730831244479245404552101642278975,
                20507418596563327887523630970737053168474129774551521696860718895244183292928,
                7174734448174470445226875325904717435628708934508978488999432599849888015542,
                7846795204843568814288661432119656524539043540050980016835045736906538090190,
                3633152279003147477737891447431142406055639114369894472815669702826539942794,
                12060100452569730018676818350994788273799633472179825937105066932552091111008,
                11886359876661963996326647657502181160934791941250663293436029652134363508123,
                3058715974186430819228538964457943906883525645518925008136258294937348473020,
                8995427122687175792691637371963876615055844584426115707219030393188530554779,
                462498122045497054837233523307623880793278668859455882350467967719317974006,
                18174130755370184480667635274314560176388366186932639764574894878927666501961,
                20490244073427964508972221844929143888510039242203367182350005760858192677588,
                21845506348623550894669096933324824409051056234540494608233257318747134962249,
                14973589947186467156486530254504672967302346450794053484874079345854218144322,
            ],
        },
    };

    let name_and_dob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 10982589642709534277986213660166790642591757156405314643744842156507813418736,
            leaf_index: 6702,
            sibling_path: [
                10988316749241412875786884317369210288108650195117535820460740399526918901296,
                11101507204854233811355758046755547394154196133316136174417786576552540142879,
                21228762673622246549511075664418090493552215603557759405465094618088121257407,
                10850633508060221312861651828492344358696815118850304621758476993068694398504,
                20879791204883548968161571637646871449998437068498984009348131886386994898873,
                3124709831969589823791603272673216925915060065337054398081938006506008249211,
                13327600831878890510211243393382584362309939497462007525200573504799650566949,
                8545374403066043350011928990150764160521426913406787884769613593630553235726,
                8952418677442410591419041136521016339100977982163971395765181175752567979053,
                6169603174165542315744585244769667866229888097312485872953867565490631966930,
                10537710886277410780436285833894896970104063084070097574878648984671238095224,
                15063606803606013588985333386066438808747948778613913180497298620768384279105,
                15171494791830902093072314965491896037431686250480072464841874593193557686791,
                10503998961605368431340715288149409141731570720122598863418105270922137068865,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 10988316749241412875786884317369210288108650195117535820460740399526918901296,
            leaf_index: 6703,
            sibling_path: [
                10982589642709534277986213660166790642591757156405314643744842156507813418736,
                11101507204854233811355758046755547394154196133316136174417786576552540142879,
                21228762673622246549511075664418090493552215603557759405465094618088121257407,
                10850633508060221312861651828492344358696815118850304621758476993068694398504,
                20879791204883548968161571637646871449998437068498984009348131886386994898873,
                3124709831969589823791603272673216925915060065337054398081938006506008249211,
                13327600831878890510211243393382584362309939497462007525200573504799650566949,
                8545374403066043350011928990150764160521426913406787884769613593630553235726,
                8952418677442410591419041136521016339100977982163971395765181175752567979053,
                6169603174165542315744585244769667866229888097312485872953867565490631966930,
                10537710886277410780436285833894896970104063084070097574878648984671238095224,
                15063606803606013588985333386066438808747948778613913180497298620768384279105,
                15171494791830902093072314965491896037431686250480072464841874593193557686791,
                10503998961605368431340715288149409141731570720122598863418105270922137068865,
            ],
        },
    };

    let name_and_yob_proof = SanctionsOrderedMerkleTreeProof {
        left: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 21802775494169570712054597594722503615270255853359869283706744891343336934794,
            leaf_index: 13328,
            sibling_path: [
                21804392937202599856385198671766495001600615926403073435226201602406279356638,
                8867216659507245487597827187311703055628496714522161462810234614599586060238,
                18119054291873053048083037461097890100377335393117936941844800001338461428073,
                13566566072255223044743833674155659385850587858974688747139490998504014072143,
                14296627303460999169001122378512982438034876098891783882101216895226814101320,
                12449655114804312090453562022983693556979527746728855215195202786072309602600,
                16450408797821927797048996665578213539053661544018121199318343166394388490150,
                20567739078944838550556895816409602128127282297589578747131836752205066334747,
                2915761020738377646169465098196184536995852317462848975418156916828302972897,
                10985760690611977917867463287126968335324276333731556907069004868774077204850,
                19059111449353608988858139277324400021806194487666838993645844165571760043413,
                6873111190261103763395069460662520014470628472871405490586772273844549690535,
                3300126433963947024264643850895280741287612543075377853348713316886865919057,
                14973589947186467156486530254504672967302346450794053484874079345854218144322,
            ],
        },
        right: SanctionsOrderedMerkleTreeInclusionProof {
            leaf: 21804392937202599856385198671766495001600615926403073435226201602406279356638,
            leaf_index: 13329,
            sibling_path: [
                21802775494169570712054597594722503615270255853359869283706744891343336934794,
                8867216659507245487597827187311703055628496714522161462810234614599586060238,
                18119054291873053048083037461097890100377335393117936941844800001338461428073,
                13566566072255223044743833674155659385850587858974688747139490998504014072143,
                14296627303460999169001122378512982438034876098891783882101216895226814101320,
                12449655114804312090453562022983693556979527746728855215195202786072309602600,
                16450408797821927797048996665578213539053661544018121199318343166394388490150,
                20567739078944838550556895816409602128127282297589578747131836752205066334747,
                2915761020738377646169465098196184536995852317462848975418156916828302972897,
                10985760690611977917867463287126968335324276333731556907069004868774077204850,
                19059111449353608988858139277324400021806194487666838993645844165571760043413,
                6873111190261103763395069460662520014470628472871405490586772273844549690535,
                3300126433963947024264643850895280741287612543075377853348713316886865919057,
                14973589947186467156486530254504672967302346450794053484874079345854218144322,
            ],
        },
    };

    let smt_proofs = SanctionsOrderedMerkleTreeProofs {
        passport_no_and_nationality_proof: passport_proof,
        name_and_dob_proof: name_and_dob_proof,
        name_and_yob_proof: name_and_yob_proof,
    };

    trees.check_sanctions_exclusion(dg1, smt_proofs);
}

#[test]
fn non_inclusion_two() {
    let dg1 = [
        97, 91, 95, 31, 88, 80, 60, 65, 85, 83, 83, 73, 76, 86, 69, 82, 72, 65, 78, 68, 60, 60, 74,
        79, 72, 78, 78, 89, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
        60, 60, 60, 80, 65, 49, 50, 51, 52, 53, 54, 55, 95, 65, 85, 83, 56, 56, 49, 49, 49, 50, 95,
        77, 51, 48, 48, 49, 48, 49, 95, 60, 67, 89, 66, 69, 82, 67, 73, 84, 89, 60, 60, 60, 60, 60,
        60, 0, 0,
    ];

    let passport_no_and_nationality_proof_left = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x0cfd2af0e4b4b4cda318c99dd231f64ce4c6c9d0a6b0213dd66bc085f564fb7a,
        leaf_index: 0x0000000000000000000000000000000000000000000000000000000000000dda,
        sibling_path: [
            0x0cfe207fe0ea69c1394adfb9ea3ef033c2c3878108aa537d64a83e056764a684,
            0x2d3e39cd6e52bccc5bdf3b8a9235e233652b4635dd4a2b7a71ff89a5db65afc0,
            0x252d3894dc743c83da720ccb16ff067554356dd070659dc29fa6585d74be861e,
            0x0895ccee28d6b68bfed9925f970d5fc6c6068ddb3fd0eaf7a6ff028b590852e4,
            0x15f44cac6d0796e246066a8c22d23e58c36f2c56743790111050f6b9f818f846,
            0x2fcfb91361cb5894beef5316b499a892ebfab9ea1d3e903a88efa7f82bfb6003,
            0x0566e58faefb2e9cc65bdf5fb566f2b37ac0f0b77d78a81d0a336dcf7bfe69fb,
            0x181e52c46f8d823b27f948d60f897aaf80e3658953fdc9628219bf412c693c6b,
            0x0fb150bbf3b013abae78606a764ea36d4808aace89e634a189265593d8029369,
            0x1535de589e6ace9c055874b54a8918e1aa1f008b7956ca1bffc48d9a58e6ace6,
            0x10ff9c63ef0c01d62c7460bcfa1cd6c14357a0a584e19144622705bce91e8587,
            0x020db2345cdb13ff43656639982292a2466a2a39012d9ca9623910343763b548,
            0x25d4313947bcdd22821bcabc6bb189f5fa69a67c84e89ae8132cf87b61ed1d5c,
            0x17390d7f8d50799440713cda5aa389091e7e5014b4674da0142f011e03d06541,
        ],
    };

    let passport_no_and_nationality_proof_right = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x0cfe207fe0ea69c1394adfb9ea3ef033c2c3878108aa537d64a83e056764a684,
        leaf_index: 0x0000000000000000000000000000000000000000000000000000000000000ddb,
        sibling_path: [
            0x0cfd2af0e4b4b4cda318c99dd231f64ce4c6c9d0a6b0213dd66bc085f564fb7a,
            0x2d3e39cd6e52bccc5bdf3b8a9235e233652b4635dd4a2b7a71ff89a5db65afc0,
            0x252d3894dc743c83da720ccb16ff067554356dd070659dc29fa6585d74be861e,
            0x0895ccee28d6b68bfed9925f970d5fc6c6068ddb3fd0eaf7a6ff028b590852e4,
            0x15f44cac6d0796e246066a8c22d23e58c36f2c56743790111050f6b9f818f846,
            0x2fcfb91361cb5894beef5316b499a892ebfab9ea1d3e903a88efa7f82bfb6003,
            0x0566e58faefb2e9cc65bdf5fb566f2b37ac0f0b77d78a81d0a336dcf7bfe69fb,
            0x181e52c46f8d823b27f948d60f897aaf80e3658953fdc9628219bf412c693c6b,
            0x0fb150bbf3b013abae78606a764ea36d4808aace89e634a189265593d8029369,
            0x1535de589e6ace9c055874b54a8918e1aa1f008b7956ca1bffc48d9a58e6ace6,
            0x10ff9c63ef0c01d62c7460bcfa1cd6c14357a0a584e19144622705bce91e8587,
            0x020db2345cdb13ff43656639982292a2466a2a39012d9ca9623910343763b548,
            0x25d4313947bcdd22821bcabc6bb189f5fa69a67c84e89ae8132cf87b61ed1d5c,
            0x17390d7f8d50799440713cda5aa389091e7e5014b4674da0142f011e03d06541,
        ],
    };

    let name_and_dob_proof_left = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x26a52aba2d7ee812fa5f39c2d54e81378f988f8b47ea555c1f9a1b4fb162af5f,
        leaf_index: 0x00000000000000000000000000000000000000000000000000000000000029de,
        sibling_path: [
            0x26a6e02810c6cdc39ddc73de7ad1370e7444ef586d6478dda283922365f72c77,
            0x1c929047894218bfb3363d39895e91c9cc3f2edba98f75000d72f0571c26b662,
            0x2cf64256e7e861080b8ba010f29469ce6bfec61d5df1ded7940a697fa06ba597,
            0x223bd913f94994fc07e65b36f2a133970c7162169386b62efc560954447de4e3,
            0x18eadf27a22769a45ad7c4434b97a13a06fd41538d3132b24fdb0ea3a5762c19,
            0x1547abb2cc771ae1821b8ae028012dc08ee253973792d7408b2d6209ce1e8303,
            0x1598e8b62a47aa9824f06e3f0085515de9a1f9c19becafd7967a36e6e26c6e8d,
            0x12aca1d0dd18faa0718134d6240935894834ba4c4a5a9293776cad4a624affd2,
            0x00aa530834487fbf1a8edf0b8ac93ab42e2c16833df3ad3dd4b05168178c397c,
            0x2c9c37c9c825615c46f72469042fac80838f935bed0b5bb1fd7ff5865d6c5709,
            0x2be0c466ecc81120f86e06cc1cee987dea1acfa03fa5750663316178d38be49b,
            0x2d4d1131766371aa7bf3260d8d62d6495ea0af4fe374dec56c96f48fb9a50ad4,
            0x304c1e5121c7dc2d4fd3752e8f97689f489612ebe3c7cced1465c582290b2a49,
            0x211ac0674cbcab1bf25df74eec17e08b5f16edae5749ee367e627dd715fa8a42,
        ],
    };

    let name_and_dob_proof_right = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x26a6e02810c6cdc39ddc73de7ad1370e7444ef586d6478dda283922365f72c77,
        leaf_index: 0x00000000000000000000000000000000000000000000000000000000000029df,
        sibling_path: [
            0x26a52aba2d7ee812fa5f39c2d54e81378f988f8b47ea555c1f9a1b4fb162af5f,
            0x1c929047894218bfb3363d39895e91c9cc3f2edba98f75000d72f0571c26b662,
            0x2cf64256e7e861080b8ba010f29469ce6bfec61d5df1ded7940a697fa06ba597,
            0x223bd913f94994fc07e65b36f2a133970c7162169386b62efc560954447de4e3,
            0x18eadf27a22769a45ad7c4434b97a13a06fd41538d3132b24fdb0ea3a5762c19,
            0x1547abb2cc771ae1821b8ae028012dc08ee253973792d7408b2d6209ce1e8303,
            0x1598e8b62a47aa9824f06e3f0085515de9a1f9c19becafd7967a36e6e26c6e8d,
            0x12aca1d0dd18faa0718134d6240935894834ba4c4a5a9293776cad4a624affd2,
            0x00aa530834487fbf1a8edf0b8ac93ab42e2c16833df3ad3dd4b05168178c397c,
            0x2c9c37c9c825615c46f72469042fac80838f935bed0b5bb1fd7ff5865d6c5709,
            0x2be0c466ecc81120f86e06cc1cee987dea1acfa03fa5750663316178d38be49b,
            0x2d4d1131766371aa7bf3260d8d62d6495ea0af4fe374dec56c96f48fb9a50ad4,
            0x304c1e5121c7dc2d4fd3752e8f97689f489612ebe3c7cced1465c582290b2a49,
            0x211ac0674cbcab1bf25df74eec17e08b5f16edae5749ee367e627dd715fa8a42,
        ],
    };

    let name_and_yob_proof_left = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x170cc625121196dd76b4ff887e872579e90ea4e4675f46ae7f368fa30c267a64,
        leaf_index: 0x00000000000000000000000000000000000000000000000000000000000018e7,
        sibling_path: [
            0x170ba90813faaabc06f034093a9cc2169bd05445450bb60c8c099adb87a48b9e,
            0x07901e69267b8d8032f571149951e7bd3a81e9c08bfac7c1666eb8f4e2a9b620,
            0x001cbb18df87523d7f069645a899e5ab0d82414b26b5632d76a434e609bd5de1,
            0x24a83706bcd449d2d9b1493a78f7ae642f4f95452b9806224526556ffa87d51d,
            0x1a4deb0f6de5c310f0f483bf0955082d693ecbc20dd954f2b38bf318231c3ed5,
            0x1edb10f1461513a6d3e057153b9970bad063ddaf1c0c81d6a6eee6fbbe300d60,
            0x2c0907e6a1245c0a9da15ce8018e305edab6b3b58c4e52e5242a8a4ebdd1746f,
            0x05f66ad180a7112a71aae97595a307742b8f38031a8d82a977b8ad764ca62210,
            0x2691683929581e7bf5cf3ea1ea75b1798814d9ee95b160a4a3b0f6f746fb251e,
            0x1ea88579e82ae23e413e1dd8109ceabe76c426da8f1193a8cf9de9fb5ba7fdeb,
            0x174c220c55e0afedca27de4322080b7e90f006b177422e425b3e34746e8a0178,
            0x214db30613210e2218eef96abb6b262150ce37f37bcbba1147a763db70bd6241,
            0x218ac301f845b48b8aa81cbd0b76e6851ba56b9f4e481472ece4e5bb627efa07,
            0x17390d7f8d50799440713cda5aa389091e7e5014b4674da0142f011e03d06541,
        ],
    };

    let name_and_yob_proof_right = SanctionsOrderedMerkleTreeInclusionProof {
        leaf: 0x170db2e37e35bd5e9cf014ac2b46fc7838e7ff8bc8c8a38cc27b7ca7fa421619,
        leaf_index: 0x00000000000000000000000000000000000000000000000000000000000018e8,
        sibling_path: [
            0x170f4ef9fcd1d355a853bad616a812c6f43050f58017f700bb58004fe7578cb6,
            0x2aab88b85cdc5f230c0899f64d9d681892deb60c534727288f961e7ad04525cf,
            0x0ab98de60ed27080b86e487296c79194061a4c4fb52d0da34b23604e5e49b6ba,
            0x303a7e8ff56c96395fbec1a6d69d28ca54de38e066ffa2cbc78d3db84b4e5d46,
            0x1a4deb0f6de5c310f0f483bf0955082d693ecbc20dd954f2b38bf318231c3ed5,
            0x1edb10f1461513a6d3e057153b9970bad063ddaf1c0c81d6a6eee6fbbe300d60,
            0x2c0907e6a1245c0a9da15ce8018e305edab6b3b58c4e52e5242a8a4ebdd1746f,
            0x05f66ad180a7112a71aae97595a307742b8f38031a8d82a977b8ad764ca62210,
            0x2691683929581e7bf5cf3ea1ea75b1798814d9ee95b160a4a3b0f6f746fb251e,
            0x1ea88579e82ae23e413e1dd8109ceabe76c426da8f1193a8cf9de9fb5ba7fdeb,
            0x174c220c55e0afedca27de4322080b7e90f006b177422e425b3e34746e8a0178,
            0x214db30613210e2218eef96abb6b262150ce37f37bcbba1147a763db70bd6241,
            0x218ac301f845b48b8aa81cbd0b76e6851ba56b9f4e481472ece4e5bb627efa07,
            0x17390d7f8d50799440713cda5aa389091e7e5014b4674da0142f011e03d06541,
        ],
    };

    let smt_proofs = SanctionsOrderedMerkleTreeProofs {
        passport_no_and_nationality_proof: SanctionsOrderedMerkleTreeProof {
            left: passport_no_and_nationality_proof_left,
            right: passport_no_and_nationality_proof_right,
        },
        name_and_dob_proof: SanctionsOrderedMerkleTreeProof {
            left: name_and_dob_proof_left,
            right: name_and_dob_proof_right,
        },
        name_and_yob_proof: SanctionsOrderedMerkleTreeProof {
            left: name_and_yob_proof_left,
            right: name_and_yob_proof_right,
        },
    };

    let trees: SanctionsSparseMerkleTrees = SanctionsSparseMerkleTrees::default();

    trees.check_sanctions_exclusion(dg1, smt_proofs);
}
