pub mod types;
pub mod array;
pub mod packing;
pub mod dg1;

/**
* The standards for passports and any other travel documents, electronic or not,
* are defined in the ICAO (International Civil Aviation Organization) 9303 document available here:
* https://www.icao.int/publications/pages/publication.aspx?docnum=9303
*/

use types::{
    MRZDate, MRZDocumentNumber, MRZDocumentType, MRZGender, MRZIssuingCountry, MRZName,
    MRZNationality,
};

/**
* The structure of the MRZ is well defined and standardized by the ICAO
* so the index will always be the same for every passport
* c.f. ICAO 9303-4, Appendix B
*/

// The following constants define the indices of the information
// we need to generate various proofs of identity from the MRZ
// The structure of the MRZ is slightly different between passports
// and ID cards so we need to define indices for both types

// Index for the country of issuance of the passport
pub global PASSPORT_MRZ_COUNTRY_INDEX: u32 = 2;
// Index for the three letter code of the country of citizenship
// Note that the first three letter code (index 2) in the MRZ is the country of issuance
// not citizenship. It is important to keep in mind for residence permits
// where the issuing country differs from the citizenship country
pub global PASSPORT_MRZ_NATIONALITY_INDEX: u32 = 54;
// Index for the gender of the passport holder (M, F or < if unspecified)
pub global PASSPORT_MRZ_GENDER_INDEX: u32 = 64;
// Index for the date of expiry (YYMMDD)
pub global PASSPORT_MRZ_EXPIRY_DATE_INDEX: u32 = 65;
// Index for the date of birth (YYMMDD) in TD1 (i.e. passport) MRZ
pub global PASSPORT_MRZ_BIRTHDATE_INDEX: u32 = 57;
// Index for the document number in the MRZ
pub global PASSPORT_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 44;
// Index for the document type in the MRZ
pub global PASSPORT_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;
// Index for the name of the passport holder
pub global PASSPORT_MRZ_NAME_INDEX: u32 = 5;
// Length of the DG1
pub global DG1_LENGTH: u32 = 95;
// Length of the DG1 with padding
pub global DG1_LENGTH_WITHOUT_PADDING: u32 = 93;
// Length of the MRZ
pub global MRZ_LENGTH: u32 = 90;
// Length of the MRZ on a passport
pub global PASSPORT_MRZ_LENGTH: u32 = 88;

pub global MRZ_NAME_LENGTH: u32 = 39;
pub global MRZ_DATE_LENGTH: u32 = 6;
pub global MRZ_YOB_LENGTH: u32 = 2;
pub global MRZ_DOCUMENT_NUMBER_LENGTH: u32 = 9;
pub global MRZ_DOCUMENT_TYPE_LENGTH: u32 = 2;
pub global MRZ_NATIONALITY_LENGTH: u32 = 3;
pub global MRZ_GENDER_LENGTH: u32 = 1;

// Index for the country of issuance of the ID card
pub global ID_CARD_MRZ_COUNTRY_INDEX: u32 = 2;
// Note that the first three letter code (index 2) in the MRZ is the country of issuance
// not citizenship. It is important to keep in mind for residence permits
// where the issuing country differs from the citizenship country
pub global ID_CARD_MRZ_NATIONALITY_INDEX: u32 = 45;
// Index for the gender of the passport holder (M, F or < if unspecified)
pub global ID_CARD_MRZ_GENDER_INDEX: u32 = 37;
// Index for the date of expiry (YYMMDD)
pub global ID_CARD_MRZ_EXPIRY_DATE_INDEX: u32 = 38;
// Index for the date of birth (YYMMDD) in TD3 (i.e. ID cards) MRZ
pub global ID_CARD_MRZ_BIRTHDATE_INDEX: u32 = 30;
// Index for the document number in the MRZ
pub global ID_CARD_MRZ_DOCUMENT_NUMBER_INDEX: u32 = 5;
// Index for the document type in the MRZ
pub global ID_CARD_MRZ_DOCUMENT_TYPE_INDEX: u32 = 0;
// Index for the name of the passport holder
pub global ID_CARD_MRZ_NAME_INDEX: u32 = 60;
// Length of the MRZ on an ID card
pub global ID_CARD_MRZ_LENGTH: u32 = 90;

// ECDSA curves mapping
pub global ECDSA_CURVE_P256: u32 = 0;
pub global ECDSA_CURVE_P384: u32 = 1;
pub global ECDSA_CURVE_P521: u32 = 2;
pub global ECDSA_CURVE_BRAINPOOL_B256R1: u32 = 3;
pub global ECDSA_CURVE_BRAINPOOL_B256T1: u32 = 4;
pub global ECDSA_CURVE_BRAINPOOL_B384R1: u32 = 5;
pub global ECDSA_CURVE_BRAINPOOL_B384T1: u32 = 6;
pub global ECDSA_CURVE_BRAINPOOL_B512R1: u32 = 7;
pub global ECDSA_CURVE_BRAINPOOL_B512T1: u32 = 8;

// Proof type to identify the circuit used for a given parameter commitment
pub global PROOF_TYPE_DISCLOSE: u8 = 0;
pub global PROOF_TYPE_AGE: u8 = 1;
pub global PROOF_TYPE_BIRTHDATE: u8 = 2;
pub global PROOF_TYPE_EXPIRY_DATE: u8 = 3;
pub global PROOF_TYPE_NATIONALITY_INCLUSION: u8 = 4;
pub global PROOF_TYPE_NATIONALITY_EXCLUSION: u8 = 5;
pub global PROOF_TYPE_ISSUING_COUNTRY_INCLUSION: u8 = 6;
pub global PROOF_TYPE_ISSUING_COUNTRY_EXCLUSION: u8 = 7;
pub global PROOF_TYPE_BIND: u8 = 8;

pub struct IDData {
    // Regroups the hashes of all the data groups plus some padding
    // at the start and in between each data group hashes
    pub e_content: [u8; 700],
    pub e_content_size: u32,
    // Where we can find e_content in the signed_attributes
    // It varies from document to document according to the length
    // of the padding at the start
    pub dg1_offset_in_e_content: u32,
    // Last 32 bytes: result of the hash of all the hashes of the data groups
    // Rest of the bytes: information about the signature algorithm, date, etc.
    pub signed_attributes: [u8; 200],
    pub signed_attributes_size: u32,
    // The DG1 contains the Machine Readable Zone (MRZ) of the document
    // The two lines at the bottom of the passport data page
    // or the three bottom lines on the rear of an ID card
    // 95 bytes for passports, 93 bytes for ID cards
    // Including 88 bytes of MRZ and 5 bytes of padding for passports
    // and 90 bytes of MRZ and 5 bytes of padding for ID cards
    pub dg1: [u8; 95],
    // The signature over the data groups
    pub sod_signature: [u8; 512],
    pub sod_signature_size: u32,
}

pub struct DSCData {
    // The TBS certificate of the DSC
    // TBS stands for To Be Signed
    pub tbs_certificate: [u8; 1500],
    pub tbs_certificate_size: u32,
    // The public key of the DSC (up to 512 bytes to account for RSA-4096)
    pub pubkey: [u8; 512],
    // The actual size of the public key
    pub pubkey_size: u32,
    // The index of the public key in the TBS certificate
    pub pubkey_index: u32,
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    pub pubkey_redc_param: [u8; 513],
    // The signature over the TBS certificate
    pub signature: [u8; 512],
    pub signature_size: u32,
    // The exponent of the public key
    // Only useful for RSA, can be ignored for ECDSA
    pub exponent: u32,
}

pub struct CSCData {
    // The public key of the CSC (up to 512 bytes to account for RSA-4096)
    pub pubkey: [u8; 512],
    // The actual size of the public key
    pub pubkey_size: u32,
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    pub pubkey_redc_param: [u8; 513],
    // Only useful for RSA, can be ignored for ECDSA
    pub exponent: u32,
}

pub struct DiscloseFlags {
    pub issuing_country: bool,
    pub nationality: bool,
    pub document_type: bool,
    pub document_number: bool,
    pub date_of_expiry: bool,
    pub date_of_birth: bool,
    pub gender: bool,
    pub name: bool,
}

pub struct DisclosedData {
    pub issuing_country: MRZIssuingCountry,
    pub nationality: MRZNationality,
    pub document_type: MRZDocumentType,
    pub document_number: MRZDocumentNumber,
    pub date_of_expiry: MRZDate,
    pub date_of_birth: MRZDate,
    pub name: MRZName,
    pub gender: MRZGender,
}
